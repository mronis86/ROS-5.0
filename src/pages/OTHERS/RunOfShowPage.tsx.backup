import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Event } from '../types/Event';
import { DatabaseService } from '../services/database';

// Speaker interface/type definition
interface Speaker {
  id: string;
  slot: number;
  location: 'Podium' | 'Seat' | 'Virtual';
  fullName: string;
  title: string;
  org: string;
  photoLink: string;
}

interface ScheduleItem {
  id: number;
  day: number;
  programType: string;
  shotType: string;
  segmentName: string;
  durationHours: number;
  durationMinutes: number;
  durationSeconds: number;
  notes: string;
  assets: string;
  speakers: string;
  hasPPT: boolean;
  hasQA: boolean;
  timerId: string;
  customFields: Record<string, string>;
  isPublic: boolean;
  isIndented: boolean;
}

interface CustomColumn {
  name: string;
  id: string;
}

const RunOfShowPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  let event: Event = location.state?.event;
  
  // Fallback: Try to get event from localStorage if not in location state
  if (!event) {
    const savedEvents = localStorage.getItem('events');
    if (savedEvents) {
      const events = JSON.parse(savedEvents);
      // Get the most recent event as fallback
      event = events[events.length - 1];
    }
  }
  
  // Debug: Log the event data
  console.log('Event from location.state:', location.state?.event);
  console.log('Final event data:', event);
  
  const [schedule, setSchedule] = useState<ScheduleItem[]>([]);
  const [customColumns, setCustomColumns] = useState<CustomColumn[]>([]);
  const [eventName, setEventName] = useState(event?.name || '');
  const [masterStartTime, setMasterStartTime] = useState('');
  const [selectedDay, setSelectedDay] = useState<number>(1);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showInsertRowModal, setShowInsertRowModal] = useState(false);
  const [insertRowPosition, setInsertRowPosition] = useState<number | null>(null);
  const [showCustomColumnModal, setShowCustomColumnModal] = useState(false);
  const [showNotesModal, setShowNotesModal] = useState(false);
  const [editingNotesItem, setEditingNotesItem] = useState<number | null>(null);
  const [showAssetsModal, setShowAssetsModal] = useState(false);
  const [editingAssetsItem, setEditingAssetsItem] = useState<number | null>(null);
  const [showParticipantsModal, setShowParticipantsModal] = useState(false);
  const [editingParticipantsItem, setEditingParticipantsItem] = useState<number | null>(null);
  const [tempSpeakers, setTempSpeakers] = useState<Speaker[]>([]);
  const [activeTimers, setActiveTimers] = useState<Record<number, NodeJS.Timeout>>({});
  const [completedCues, setCompletedCues] = useState<Record<number, boolean>>({});
  const [secondaryTimer, setSecondaryTimer] = useState<{
    itemId: number;
    duration: number;
    remaining: number;
    isActive: boolean;
  } | null>(null);
  const [secondaryTimerInterval, setSecondaryTimerInterval] = useState<NodeJS.Timeout | null>(null);
  const [showGridHeaders, setShowGridHeaders] = useState(false);
  const [activeRowMenu, setActiveRowMenu] = useState<number | null>(null);
  const [activeItemMenu, setActiveItemMenu] = useState<number | null>(null);
  const [activeItemId, setActiveItemId] = useState<number | null>(null);
  const [timerProgress, setTimerProgress] = useState<Record<number, { elapsed: number; total: number }>>({});
  const [selectedTimerId, setSelectedTimerId] = useState<number | null>(null);
  const [loadedItems, setLoadedItems] = useState<Record<number, boolean>>({});
  const [showMenuDropdown, setShowMenuDropdown] = useState(false);
  const [fullScreenTimerWindow, setFullScreenTimerWindow] = useState<Window | null>(null);
  const [showMessagesModal, setShowMessagesModal] = useState(false);
  const [messageText, setMessageText] = useState('');
  const [messageEnabled, setMessageEnabled] = useState(false);
  const [showFilterModal, setShowFilterModal] = useState(false);
  const [visibleColumns, setVisibleColumns] = useState({
    start: true,
    programType: true,
    duration: true,
    segmentName: true,
    shotType: true,
    pptQA: true,
    notes: true,
    assets: true,
    participants: true,
    public: true,
    custom: true
  });
  const [visibleCustomColumns, setVisibleCustomColumns] = useState<Record<string, boolean>>({});
  
  // Column widths state
  const [columnWidths, setColumnWidths] = useState({
    start: 128, // w-32 = 128px
    programType: 224, // w-56 = 224px
    duration: 224, // w-56 = 224px
    segmentName: 320, // w-80 = 320px
    shotType: 192, // w-48 = 192px
    pptQA: 192, // w-48 = 192px
    notes: 384, // w-96 = 384px
    assets: 192, // w-48 = 192px
    participants: 256, // w-64 = 256px
    public: 128, // w-32 = 128px
  });
  const [customColumnWidths, setCustomColumnWidths] = useState<Record<string, number>>({});
  
  // Follow feature state
  const [isFollowEnabled, setIsFollowEnabled] = useState(false);
  
  // Track stopped items for inactive styling
  const [stoppedItems, setStoppedItems] = useState<Set<number>>(new Set());
  
  // Track dependent rows for orange highlighting when CUE is loaded
  const [loadedCueDependents, setLoadedCueDependents] = useState<Set<number>>(new Set());
  
  // Toast notification state
  const [showToast, setShowToast] = useState(false);
  const [timeStatus, setTimeStatus] = useState<'early' | 'late' | 'on-time' | null>(null);
  const [timeDifference, setTimeDifference] = useState(0);
  const [showTimeToast, setShowTimeToast] = useState(true);
  
  // Username overlay system
  const [showUsernameModal, setShowUsernameModal] = useState(false);
  const [username, setUsername] = useState('');
  const [browserId, setBrowserId] = useState('');
  const [activeUsers, setActiveUsers] = useState<any[]>([]);
  
  // Toggle for showing time toast
  
  // Show toast when a timer starts and auto-close after 20 seconds
  useEffect(() => {
    if (!showTimeToast || Object.keys(activeTimers).length === 0) {
      setShowToast(false);
      return;
    }
    
    const activeTimerId = parseInt(Object.keys(activeTimers)[0]);
    const activeItem = schedule.find(item => item.id === activeTimerId);
    
    if (activeItem) {
      try {
        const now = new Date();
        const itemIndex = schedule.findIndex(item => item.id === activeItem.id);
        const itemStartTimeStr = calculateStartTime(itemIndex);
        
        if (itemStartTimeStr) {
          // Parse the start time string (format: "1:30 PM")
          const [timePart, period] = itemStartTimeStr.split(' ');
          const [hours, minutes] = timePart.split(':').map(Number);
          let hour24 = hours;
          if (period === 'PM' && hours !== 12) hour24 += 12;
          if (period === 'AM' && hours === 12) hour24 = 0;
          
          // Create a date object for today with the calculated time
          const today = new Date();
          const itemStartTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hour24, minutes);
          
          const differenceMs = now.getTime() - itemStartTime.getTime();
          const differenceMinutes = Math.round(differenceMs / (1000 * 60));
          
          setTimeDifference(Math.abs(differenceMinutes));
          
          // Show toast for all timers when enabled
          if (differenceMinutes < -1) {
            setTimeStatus('early');
            setShowToast(true);
          } else if (differenceMinutes > 1) {
            setTimeStatus('late');
            setShowToast(true);
          } else {
            setTimeStatus('on-time');
            setShowToast(true); // Show even if on-time when timer starts
          }
          
          // Auto-close after 20 seconds
          setTimeout(() => {
            setShowToast(false);
          }, 20000);
        }
      } catch (error) {
        console.error('Error calculating time status:', error);
        setShowToast(false);
      }
    }
  }, [activeTimers, schedule, showTimeToast]);
  
  // Auto-scroll to active row function
  const scrollToActiveRow = () => {
    if (!isFollowEnabled) return;
    
    const activeRow = document.querySelector(`[data-item-id="${activeItemId}"]`);
    if (activeRow) {
      // Find the column headers (main grid headers) to ensure row doesn't scroll past them
      const columnHeaders = document.querySelector('#main-scroll-container .h-24');
      let headerOffset = 100; // Default fallback
      
      if (columnHeaders) {
        const headerRect = columnHeaders.getBoundingClientRect();
        const containerRect = document.querySelector('#main-scroll-container')?.getBoundingClientRect();
        if (containerRect) {
          // Calculate the offset from the top of the viewport to the bottom of column headers
          // Use getBoundingClientRect for consistent positioning regardless of horizontal scroll
          headerOffset = headerRect.bottom - containerRect.top - 120; // -120px gap - split the difference
        }
      }
      
      // Calculate position: ensure row doesn't go above column headers
      // Use getBoundingClientRect for consistent positioning regardless of horizontal scroll
      const elementRect = (activeRow as HTMLElement).getBoundingClientRect();
      const containerRect = document.querySelector('#main-scroll-container')?.getBoundingClientRect();
      if (containerRect) {
        const scrollPosition = elementRect.top - containerRect.top - headerOffset;
        
        // Scroll to position the row below the column headers
        window.scrollTo({
          top: scrollPosition,
          behavior: 'smooth'
        });
      }
    }
  };
  
  const [modalForm, setModalForm] = useState({
    cue: '',
    day: 1,
    programType: 'PreShow/End',
    shotType: '',
    segmentName: '',
    durationHours: 0,
    durationMinutes: 0,
    durationSeconds: 0,
    notes: '',
    assets: '',
    speakers: '',
    hasPPT: false,
    hasQA: false,
    timerId: '',
    isPublic: false,
    isIndented: false,
    customFields: {}
  });

  // Update modal form day when selectedDay changes
  useEffect(() => {
    setModalForm(prev => ({ ...prev, day: selectedDay }));
  }, [selectedDay]);

  const programTypes = [
    'PreShow/End', 'Podium Transition', 'Panel Transition', 'Sub Cue',
    'No Transition', 'Video', 'Panel+Remote', 'Remote Only', 'Break', 'TBD', 'KILLED'
  ];

  // Program Type color mapping
  const programTypeColors: { [key: string]: string } = {
    'PreShow/End': '#8B5CF6',        // Bright Purple
    'Podium Transition': '#8B4513',  // Dark Brown
    'Panel Transition': '#696969',   // Dark Grey
    'Sub Cue': '#F3F4F6',           // White with border
    'No Transition': '#059669',      // Bright Teal
    'Video': '#F59E0B',              // Bright Yellow/Orange
    'Panel+Remote': '#3B82F6',       // Bright Blue
    'Remote Only': '#60A5FA',        // Light Blue
    'Break': '#EC4899',              // Bright Pink
    'TBD': '#6B7280',                // Medium Gray
    'KILLED': '#DC2626'              // Bright Red
  };

  // Function to get subtle row background color based on Program Type
  const getRowBackgroundColor = (programType: string, index: number) => {
    const baseColor = programTypeColors[programType];
    if (!baseColor) {
      // Default alternating colors if no program type color
      return index % 2 === 0 ? 'bg-slate-800' : 'bg-slate-900';
    }

    // Convert hex to RGB and add opacity
    const hex = baseColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // Create brighter, more defined background with 30% opacity
    return `rgba(${r}, ${g}, ${b}, 0.3)`;
  };

  // Enhanced function to calculate dynamic row height based on notes content
  const getRowHeight = (notes: string, speakers?: string) => {
    let maxHeight = 6.5; // Default minimum height in rem
    
    // Calculate height based on notes
    if (notes && notes.trim() !== '') {
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.visibility = 'hidden';
      tempDiv.style.width = '22rem'; // Match your w-96 (384px = ~22rem)
      tempDiv.style.padding = '0.75rem'; // Match py-3 px-3
      tempDiv.style.fontSize = '1rem'; // Match text-base
      tempDiv.style.lineHeight = '1.5';
      tempDiv.style.fontFamily = 'system-ui, -apple-system, sans-serif';
      tempDiv.style.whiteSpace = 'pre-wrap';
      tempDiv.style.wordWrap = 'break-word';
      tempDiv.innerHTML = notes;
      
      document.body.appendChild(tempDiv);
      const contentHeight = tempDiv.scrollHeight;
      document.body.removeChild(tempDiv);
      
      const contentHeightRem = contentHeight / 16;
      const paddingRem = 2; // Top and bottom padding
      const notesHeight = contentHeightRem + paddingRem;
      maxHeight = Math.max(maxHeight, notesHeight);
    }
    
    // Calculate height based on speakers (JSON-based)
    if (speakers && speakers.trim() !== '') {
      try {
        const parsedSpeakers = JSON.parse(speakers);
        if (Array.isArray(parsedSpeakers) && parsedSpeakers.length > 0) {
          const validSpeakers = parsedSpeakers.filter(speaker => 
            speaker.fullName && speaker.fullName.trim() !== '' &&
            speaker.location && ['Podium', 'Seat', 'Virtual'].includes(speaker.location) &&
            speaker.slot >= 1 && speaker.slot <= 7
          );
          
          if (validSpeakers.length > 0) {
            // Each speaker takes about 1.5rem height (text-sm + spacing)
            let speakersHeight = 2.5 + (validSpeakers.length * 1.5); // 2.5rem base + 1.5rem per speaker
            
            // Add extra padding for 4 or more speakers
            if (validSpeakers.length >= 4) {
              speakersHeight += 2.5; // Add 2.5rem extra padding
            }
            
            maxHeight = Math.max(maxHeight, speakersHeight);
          }
        }
      } catch (e) {
        console.error("Failed to parse speakers for height calculation:", e);
      }
    }
    
    return `${maxHeight}rem`;
  };

  // Function to calculate compact height for main Notes field
  const getCompactNotesHeight = (notes: string) => {
    if (!notes || notes.trim() === '') return '4.5rem';
    
    // Create a temporary element to measure the actual rendered height
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.visibility = 'hidden';
    tempDiv.style.width = '20rem'; // Slightly smaller for compact view
    tempDiv.style.padding = '0.5rem'; // Match py-2 px-3
    tempDiv.style.fontSize = '1rem'; // Match text-base
    tempDiv.style.lineHeight = '1.4'; // Slightly tighter line height
    tempDiv.style.fontFamily = 'system-ui, -apple-system, sans-serif';
    tempDiv.style.whiteSpace = 'pre-wrap';
    tempDiv.style.wordWrap = 'break-word';
    tempDiv.innerHTML = notes;
    
    document.body.appendChild(tempDiv);
    const contentHeight = tempDiv.scrollHeight;
    document.body.removeChild(tempDiv);
    
    // Convert px to rem (assuming 16px = 1rem)
    const contentHeightRem = contentHeight / 16;
    
    // Add padding and minimum height
    const paddingRem = 1.5; // Top and bottom padding
    const minHeightRem = 4.5;
    const totalHeight = contentHeightRem + paddingRem;
    
    return `${Math.max(minHeightRem, totalHeight)}rem`;
  };

  // Function to clean HTML content and handle line breaks
  const cleanHtmlContent = (html: string) => {
    return html
      .replace(/<div>/g, '<br>')
      .replace(/<\/div>/g, '')
      .replace(/<br><br>/g, '<br>')
      .replace(/^<br>/, '')
      .replace(/<br>$/, '');
  };

  // Function to strip HTML tags and get plain text
  const stripHtml = (html: string) => {
    const temp = document.createElement('div');
    temp.innerHTML = html;
    return temp.textContent || temp.innerText || '';
  };

  // Enhanced formatting function that works with contentEditable
  const applyFormatting = (format: string, value?: string) => {
    const editor = document.getElementById('notes-editor');
    if (!editor) return;
    
    editor.focus();
    
    try {
      switch (format) {
        case 'bold':
          document.execCommand('bold', false);
          break;
        case 'italic':
          document.execCommand('italic', false);
          break;
        case 'underline':
          document.execCommand('underline', false);
          break;
        case 'color':
          if (value) {
            document.execCommand('foreColor', false, value);
          }
          break;
        case 'highlight':
          if (value && value !== 'none') {
            document.execCommand('backColor', false, value);
          } else {
            document.execCommand('removeFormat', false);
          }
          break;
        case 'fontSize':
          if (value) {
            document.execCommand('fontSize', false, value);
          }
          break;
        case 'bullet':
          document.execCommand('insertUnorderedList', false);
          break;
        case 'list':
          document.execCommand('insertOrderedList', false);
          break;
        case 'left':
          document.execCommand('justifyLeft', false);
          break;
        case 'center':
          document.execCommand('justifyCenter', false);
          break;
        case 'right':
          document.execCommand('justifyRight', false);
          break;
        case 'undo':
          document.execCommand('undo', false);
          break;
        case 'redo':
          document.execCommand('redo', false);
          break;
      }
    } catch (error) {
      console.warn('Formatting command not supported:', format);
    }
  };

  // Save function
  const saveNotes = () => {
    const editor = document.getElementById('notes-editor');
    if (editor && editingNotesItem !== null) {
      const content = editor.innerHTML;
      
      if (editingNotesItem === -1) {
        // Save to modal form
        setModalForm(prev => ({ ...prev, notes: content }));
      } else {
        // Save to existing schedule item
        setSchedule(prev => prev.map(scheduleItem => 
          scheduleItem.id === editingNotesItem 
            ? { ...scheduleItem, notes: content }
            : scheduleItem
        ));
      }
      
      setShowNotesModal(false);
      setEditingNotesItem(null);
    }
  };

  // Save assets function
  const saveAssets = () => {
    if (editingAssetsItem !== null) {
      const assetsContainer = document.getElementById('assets-list');
      if (assetsContainer) {
        const assetItems = assetsContainer.querySelectorAll('.asset-item');
        const assetsArray: string[] = [];
        
        assetItems.forEach(item => {
          const nameInput = item.querySelector('.asset-name') as HTMLInputElement;
          const linkInput = item.querySelector('.asset-link') as HTMLInputElement;
          
          if (nameInput && linkInput) {
            const name = nameInput.value.trim();
            const link = linkInput.value.trim();
            
            if (name) {
              // Store as "Name" or "Name|Link" if link exists
              assetsArray.push(link ? `${name}|${link}` : name);
            }
          }
        });
        
        const assetsString = assetsArray.join('||');
        
        if (editingAssetsItem === -1) {
          // Save to modal form
          setModalForm(prev => ({ ...prev, assets: assetsString }));
        } else {
          // Save to existing schedule item
          setSchedule(prev => prev.map(scheduleItem => 
            scheduleItem.id === editingAssetsItem 
              ? { 
                  ...scheduleItem, 
                  assets: assetsString
                }
              : scheduleItem
          ));
        }
        
        setShowAssetsModal(false);
        setEditingAssetsItem(null);
      }
    }
  };

  // Add new asset row
  const addAssetRow = () => {
    const assetsContainer = document.getElementById('assets-list');
    if (assetsContainer) {
      const assetItem = document.createElement('div');
      assetItem.className = 'asset-item p-3 bg-slate-700 rounded-lg space-y-3';
      assetItem.innerHTML = `
        <div class="flex gap-3 items-center">
          <input type="text" class="asset-name flex-1 px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500" placeholder="Asset name..." />
          <button type="button" class="toggle-link px-3 py-2 bg-blue-600 hover:bg-blue-500 text-white rounded transition-colors text-sm">
            + Link
          </button>
          <button type="button" class="remove-asset px-3 py-2 bg-red-600 hover:bg-red-500 text-white rounded transition-colors">Remove</button>
        </div>
        <div class="asset-link-container hidden">
          <input type="url" class="asset-link w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500" placeholder="Enter asset URL..." />
        </div>
      `;
      
      // Add toggle link functionality
      const toggleBtn = assetItem.querySelector('.toggle-link');
      const linkContainer = assetItem.querySelector('.asset-link-container');
      const linkInput = assetItem.querySelector('.asset-link') as HTMLInputElement;
      
      toggleBtn?.addEventListener('click', () => {
        if (linkContainer?.classList.contains('hidden')) {
          linkContainer.classList.remove('hidden');
          toggleBtn.textContent = '− Link';
          toggleBtn.classList.remove('bg-blue-600', 'hover:bg-blue-500');
          toggleBtn.classList.add('bg-slate-600', 'hover:bg-slate-500');
          linkInput?.focus();
        } else {
          linkContainer?.classList.add('hidden');
          toggleBtn.textContent = '+ Link';
          toggleBtn.classList.remove('bg-slate-600', 'hover:bg-slate-500');
          toggleBtn.classList.add('bg-blue-600', 'hover:bg-blue-500');
          if (linkInput) linkInput.value = '';
        }
      });
      
      // Add remove functionality
      const removeBtn = assetItem.querySelector('.remove-asset');
      removeBtn?.addEventListener('click', () => {
        assetItem.remove();
      });
      
      assetsContainer.appendChild(assetItem);
    }
  };

  // Add new speaker
  const addSpeaker = () => {
    if (tempSpeakers.length >= 7) return;
    
    const usedSlots = tempSpeakers.map(s => s.slot);
    const nextSlot = [1, 2, 3, 4, 5, 6, 7].find(slot => !usedSlots.includes(slot)) || 1;
    
    const newSpeaker: Speaker = {
      id: `speaker_${Date.now()}`,
      slot: nextSlot,
      location: 'Podium',
      fullName: '',
      title: '',
      org: '',
      photoLink: ''
    };
    
    setTempSpeakers(prev => [...prev, newSpeaker].sort((a, b) => a.slot - b.slot));
  };

  // Remove speaker
  const removeSpeaker = (speakerId: string) => {
    setTempSpeakers(prev => prev.filter(s => s.id !== speakerId));
  };

  // Update speaker field
  const updateSpeaker = (speakerId: string, field: keyof Speaker, value: any) => {
    setTempSpeakers(prev => 
      prev.map(speaker => 
        speaker.id === speakerId 
          ? { ...speaker, [field]: value }
          : speaker
      ).sort((a, b) => a.slot - b.slot)
    );
  };

  // Save speakers
  const saveSpeakers = () => {
    if (editingParticipantsItem !== null) {
      const speakersJson = JSON.stringify(tempSpeakers);
      
      if (editingParticipantsItem === -1) {
        // Save to modal form
        setModalForm(prev => ({ ...prev, speakers: speakersJson }));
      } else {
        // Save to existing schedule item
        setSchedule(prev => prev.map(scheduleItem => 
          scheduleItem.id === editingParticipantsItem 
            ? { ...scheduleItem, speakers: speakersJson }
            : scheduleItem
        ));
      }
      
      setShowParticipantsModal(false);
      setEditingParticipantsItem(null);
    }
  };

  // Get available slots for dropdown
  const getAvailableSlots = (currentSpeakerId: string) => {
    const usedSlots = tempSpeakers
      .filter(s => s.id !== currentSpeakerId)
      .map(s => s.slot);
    return [1, 2, 3, 4, 5, 6, 7].filter(slot => !usedSlots.includes(slot));
  };

  // Handle slot number change with swapping logic
  const handleSlotChange = (speakerId: string, newSlot: number) => {
    const currentSpeaker = tempSpeakers.find(s => s.id === speakerId);
    if (!currentSpeaker) return;

    // Check if the new slot is already taken
    const existingSpeaker = tempSpeakers.find(s => s.id !== speakerId && s.slot === newSlot);
    
    if (existingSpeaker) {
      // Swap the slot numbers
      const newSpeakers = tempSpeakers.map(speaker => {
        if (speaker.id === speakerId) {
          return { ...speaker, slot: newSlot };
        } else if (speaker.id === existingSpeaker.id) {
          return { ...speaker, slot: currentSpeaker.slot };
        }
        return speaker;
      });
      setTempSpeakers(newSpeakers);
    } else {
      // Just update the current speaker's slot
      updateSpeaker(speakerId, 'slot', newSlot);
    }
  };

  // Helper function to display speakers in your main schedule view
  const displaySpeakers = (speakersJson: string) => {
    if (!speakersJson) return 'Click to add participants...';
    
    try {
      const speakers = JSON.parse(speakersJson);
      if (!Array.isArray(speakers) || speakers.length === 0) {
        return 'Click to add participants...';
      }
      
      return speakers
        .sort((a, b) => a.slot - b.slot)
        .map(speaker => {
          const location = speaker.location === 'Podium' ? 'P' : 
                          speaker.location === 'Seat' ? 'S' : 'V';
          return `${location}${speaker.slot} - ${speaker.fullName || 'Unnamed'}`;
        })
        .join('\n');
    } catch {
      return 'Click to add participants...';
    }
  };

  const shotTypes = [
    'Podium', '2-Shot', '3-Shot', '4-Shot', '5-Shot', '6-Shot', '7-Shot'
  ];

  // Helper function to format time - handles negative values
  const formatTime = (seconds: number) => {
    const isNegative = seconds < 0;
    const absSeconds = Math.abs(seconds);
    const hours = Math.floor(absSeconds / 3600);
    const minutes = Math.floor((absSeconds % 3600) / 60);
    const secs = Math.floor(absSeconds % 60);
    const sign = isNegative ? '-' : '';
    return `${sign}${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // Get remaining time for active timer or loaded CUE - allow negative values
  const getRemainingTime = () => {
    const activeTimerIds = Object.keys(activeTimers);
    if (activeTimerIds.length > 0) {
      const activeTimerId = parseInt(activeTimerIds[0]);
      if (timerProgress[activeTimerId]) {
        const progress = timerProgress[activeTimerId];
        return progress.total - progress.elapsed;
      }
    }
    
    // If no active timer, check for loaded CUE
    if (activeItemId && timerProgress[activeItemId]) {
      const progress = timerProgress[activeItemId];
      return progress.total - progress.elapsed;
    }
    
    return 0;
  };

  // Get progress percentage for active timer only
  const getProgressPercentage = () => {
    const activeTimerIds = Object.keys(activeTimers);
    if (activeTimerIds.length > 0) {
      const activeTimerId = parseInt(activeTimerIds[0]);
      if (timerProgress[activeTimerId]) {
        const progress = timerProgress[activeTimerId];
        return progress.total > 0 ? (progress.elapsed / progress.total) * 100 : 0;
      }
    }
    
    return 0;
  };

  // Get remaining percentage for progress bar
  const getRemainingPercentage = () => {
    const activeTimerIds = Object.keys(activeTimers);
    if (activeTimerIds.length > 0) {
      const activeTimerId = parseInt(activeTimerIds[0]);
      if (timerProgress[activeTimerId]) {
        const progress = timerProgress[activeTimerId];
        const remainingSeconds = progress.total - progress.elapsed;
        return progress.total > 0 ? (remainingSeconds / progress.total) * 100 : 0;
      }
    }
    
    // If no active timer, check for loaded CUE
    if (activeItemId && timerProgress[activeItemId]) {
      const progress = timerProgress[activeItemId];
      const remainingSeconds = progress.total - progress.elapsed;
      return progress.total > 0 ? (remainingSeconds / progress.total) * 100 : 0;
    }
    
    return 0;
  };

  // Get progress bar color based on remaining time
  const getProgressBarColor = () => {
    const activeTimerIds = Object.keys(activeTimers);
    if (activeTimerIds.length > 0) {
      const activeTimerId = parseInt(activeTimerIds[0]);
      if (timerProgress[activeTimerId]) {
        const progress = timerProgress[activeTimerId];
        const remainingSeconds = progress.total - progress.elapsed;
        
        // Color based on remaining time
        if (remainingSeconds > 120) { // More than 2 minutes
          return '#10b981'; // Green
        } else if (remainingSeconds > 30) { // Less than 2 minutes but more than 30 seconds
          return '#f59e0b'; // Yellow
        } else { // Less than 30 seconds
          return '#ef4444'; // Red
        }
      }
    }
    
    // If no active timer, check for loaded CUE
    if (activeItemId && timerProgress[activeItemId]) {
      const progress = timerProgress[activeItemId];
      const remainingSeconds = progress.total - progress.elapsed;
      
      // Color based on remaining time
      if (remainingSeconds > 120) { // More than 2 minutes
        return '#10b981'; // Green
      } else if (remainingSeconds > 30) { // Less than 2 minutes but more than 30 seconds
        return '#f59e0b'; // Yellow
      } else { // Less than 30 seconds
        return '#ef4444'; // Red
      }
    }
    
    return 'transparent';
  };

  // Get countdown color based on remaining time
  const getCountdownColor = () => {
    const activeTimerIds = Object.keys(activeTimers);
    if (activeTimerIds.length > 0) {
      const activeTimerId = parseInt(activeTimerIds[0]);
      if (timerProgress[activeTimerId]) {
        const progress = timerProgress[activeTimerId];
        const remainingSeconds = progress.total - progress.elapsed;
        
        // Color based on remaining time
        if (remainingSeconds > 120) { // More than 2 minutes
          return '#10b981'; // Green
        } else if (remainingSeconds > 30) { // Less than 2 minutes but more than 30 seconds
          return '#f59e0b'; // Yellow
        } else { // Less than 30 seconds
          return '#ef4444'; // Red
        }
      }
    }
    
    // If no active timer, check for loaded CUE
    if (activeItemId && timerProgress[activeItemId]) {
      const progress = timerProgress[activeItemId];
      const remainingSeconds = progress.total - progress.elapsed;
      
      // Color based on remaining time
      if (remainingSeconds > 120) { // More than 2 minutes
        return '#10b981'; // Green
      } else if (remainingSeconds > 30) { // Less than 2 minutes but more than 30 seconds
        return '#f59e0b'; // Yellow
      } else { // Less than 30 seconds
        return '#ef4444'; // Red
      }
    }
    
    return '#ffffff';
  };

  // Adjust timer duration and update start times
  const adjustTimerDuration = (seconds: number) => {
    if (!activeItemId) return;
    
    const item = schedule.find(s => s.id === activeItemId);
    if (!item) return;
    
    // Update the item's duration
    const newDurationSeconds = Math.max(0, (item.durationHours * 3600 + item.durationMinutes * 60 + item.durationSeconds) + seconds);
    const newHours = Math.floor(newDurationSeconds / 3600);
    const newMinutes = Math.floor((newDurationSeconds % 3600) / 60);
    const newSecs = newDurationSeconds % 60;
    
    setSchedule(prev => prev.map(scheduleItem => 
      scheduleItem.id === activeItemId 
        ? { 
            ...scheduleItem, 
            durationHours: newHours,
            durationMinutes: newMinutes,
            durationSeconds: newSecs
          }
        : scheduleItem
    ));
    
    // Update the timer progress if it's running
    if (timerProgress[activeItemId]) {
      setTimerProgress(prev => ({
        ...prev,
        [activeItemId]: {
          ...prev[activeItemId],
          total: newDurationSeconds
        }
      }));
    }
  };

  // Load a CUE (stop any active timer and select the CUE)
  const loadCue = (itemId: number) => {
    // Mark any currently running CUE as completed (purple)
    Object.keys(activeTimers).forEach(timerId => {
      if (activeTimers[parseInt(timerId)]) {
        clearInterval(activeTimers[parseInt(timerId)]);
        setCompletedCues(prev => ({ ...prev, [parseInt(timerId)]: true }));
      }
    });
    setActiveTimers({});
    
    // Mark the previously active CUE as stopped (if there was one)
    if (activeItemId && activeItemId !== itemId) {
      setStoppedItems(prev => new Set([...prev, activeItemId]));
      setCompletedCues(prev => ({ ...prev, [activeItemId]: true }));
      
      // Also complete any indented items that are part of the interrupted CUE group
      const interruptedIndex = schedule.findIndex(item => item.id === activeItemId);
      if (interruptedIndex !== -1) {
        // Find all indented items that follow the interrupted CUE until the next non-indented item
        for (let i = interruptedIndex + 1; i < schedule.length; i++) {
          if (schedule[i].isIndented) {
            setCompletedCues(prev => ({ ...prev, [schedule[i].id]: true }));
            setStoppedItems(prev => new Set([...prev, schedule[i].id]));
          } else {
            // Stop when we hit a non-indented item (next CUE group)
            break;
          }
        }
      }
    }
    
    // Clear completed status for this CUE and its indented items
    setCompletedCues(prev => {
      const newCompleted = { ...prev };
      delete newCompleted[itemId];
      
      // Also clear completed status for any indented items that belong to this CUE group
      const currentIndex = schedule.findIndex(item => item.id === itemId);
      if (currentIndex !== -1) {
        for (let i = currentIndex + 1; i < schedule.length; i++) {
          if (schedule[i].isIndented) {
            delete newCompleted[schedule[i].id];
          } else {
            // Stop when we hit a non-indented item (next CUE group)
            break;
          }
        }
      }
      
      return newCompleted;
    });
    
    // Clear stopped status for the newly loaded CUE and its indented items
    setStoppedItems(prev => {
      const newStopped = new Set(prev);
      newStopped.delete(itemId);
      
      // Also remove any indented items that belong to this CUE group
      const currentIndex = schedule.findIndex(item => item.id === itemId);
      if (currentIndex !== -1) {
        for (let i = currentIndex + 1; i < schedule.length; i++) {
          if (schedule[i].isIndented) {
            newStopped.delete(schedule[i].id);
          } else {
            // Stop when we hit a non-indented item (next CUE group)
            break;
          }
        }
      }
      
      return newStopped;
    });
    
    // Initialize timer progress for the loaded CUE
    const item = schedule.find(s => s.id === itemId);
    if (item) {
      const totalSeconds = item.durationHours * 3600 + item.durationMinutes * 60 + item.durationSeconds;
      setTimerProgress(prev => ({ ...prev, [itemId]: { elapsed: 0, total: totalSeconds } }));
    }
    
    // Set dependent rows for orange highlighting
    const currentIndex = schedule.findIndex(item => item.id === itemId);
    const dependentIds = new Set<number>();
    if (currentIndex !== -1) {
      // Find all indented items that follow this CUE until the next non-indented item
      for (let i = currentIndex + 1; i < schedule.length; i++) {
        if (schedule[i].isIndented) {
          dependentIds.add(schedule[i].id);
        } else {
          // Stop when we hit a non-indented item (next CUE group)
          break;
        }
      }
    }
    setLoadedCueDependents(dependentIds);
    
    // Select the CUE
    setActiveItemId(itemId);
  };

  // Reset all row states to cleared
  const resetAllStates = () => {
    // Stop any active timers
    Object.keys(activeTimers).forEach(timerId => {
      if (activeTimers[parseInt(timerId)]) {
        clearInterval(activeTimers[parseInt(timerId)]);
      }
    });
    
    // Clear all states
    setActiveTimers({});
    setTimerProgress({});
    setCompletedCues({});
    setActiveItemId(null);
    setStoppedItems(new Set());
    setLoadedCueDependents(new Set()); // Clear dependent row highlighting
  };

  // Open full-screen timer in new window
  const openFullScreenTimer = () => {
    setShowMenuDropdown(false);
    
    // Close existing timer window if open
    if (fullScreenTimerWindow && !fullScreenTimerWindow.closed) {
      fullScreenTimerWindow.close();
    }

    // Get current timer data
    const activeTimerIds = Object.keys(activeTimers);
    const currentItem = activeTimerIds.length > 0 
      ? schedule.find(item => activeTimers[item.id])
      : schedule.find(item => item.id === activeItemId);

    const timerData = {
      isRunning: activeTimerIds.length > 0,
      elapsedTime: currentItem && timerProgress[currentItem.id] 
        ? timerProgress[currentItem.id].elapsed 
        : 0,
      totalDuration: currentItem 
        ? currentItem.durationHours * 3600 + currentItem.durationMinutes * 60 + currentItem.durationSeconds
        : 0,
      mainTimer: currentItem ? {
        cue: currentItem.customFields.cue || 'CUE',
        segmentName: currentItem.segmentName || ''
      } : null,
      secondaryTimer: secondaryTimer ? {
        itemId: secondaryTimer.itemId,
        remaining: secondaryTimer.remaining,
        duration: secondaryTimer.duration,
        cue: schedule.find(item => item.id === secondaryTimer.itemId)?.customFields.cue || 'CUE',
        segmentName: schedule.find(item => item.id === secondaryTimer.itemId)?.segmentName || ''
      } : null
    };

    // Open new window
    const timerWindow = window.open(
      '/fullscreen-timer',
      'fullScreenTimer',
      'width=1920,height=1080,fullscreen=yes,menubar=no,toolbar=no,location=no,status=no,scrollbars=no,resizable=yes'
    );

    if (timerWindow) {
      setFullScreenTimerWindow(timerWindow);
      
      // Send initial data to the timer window
      timerWindow.addEventListener('load', () => {
        timerWindow.postMessage({
          type: 'TIMER_UPDATE',
          ...timerData
        }, '*');
      });
    }
  };


  // Load data from localStorage on component mount
  useEffect(() => {
    const savedSchedule = localStorage.getItem(`runOfShowSchedule_${event?.id}`);
    const savedCustomColumns = localStorage.getItem(`customColumns_${event?.id}`);
    const savedEventName = localStorage.getItem(`eventName_${event?.id}`);
    const savedMasterTime = localStorage.getItem(`masterStartTime_${event?.id}`);

    if (savedSchedule) {
      const parsedSchedule = JSON.parse(savedSchedule);
      // Migrate existing items to include day property
      const migratedSchedule = parsedSchedule.map((item: any) => ({
        ...item,
        day: item.day || 1
      }));
      setSchedule(migratedSchedule);
    }
    if (savedCustomColumns) setCustomColumns(JSON.parse(savedCustomColumns));
    if (savedEventName) setEventName(savedEventName);
    if (savedMasterTime) setMasterStartTime(savedMasterTime);
  }, [event?.id]);

  // Close menus when clicking outside
  useEffect(() => {
    const handleClickOutside = () => {
      setActiveItemMenu(null);
      setActiveRowMenu(null);
      setShowMenuDropdown(false);
    };
    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, []);

  // Initialize temp content when modal opens
  useEffect(() => {
    if (showNotesModal && editingNotesItem !== null) {
      const editor = document.getElementById('notes-editor');
      if (editor) {
        if (editingNotesItem === -1) {
          // Editing modal form notes
          editor.innerHTML = modalForm.notes || '';
        } else {
          // Editing existing schedule item notes
          const item = schedule.find(item => item.id === editingNotesItem);
          editor.innerHTML = item?.notes || '';
        }
      }
    }
  }, [showNotesModal, editingNotesItem, schedule, modalForm.notes]);

  // Initialize assets modal content when modal opens
  useEffect(() => {
    if (showAssetsModal && editingAssetsItem !== null) {
      const assetsContainer = document.getElementById('assets-list');
      
      if (assetsContainer) {
        // Clear existing assets
        assetsContainer.innerHTML = '';
        
        let assetsData = '';
        if (editingAssetsItem === -1) {
          // Editing modal form assets
          assetsData = modalForm.assets || '';
        } else {
          // Editing existing schedule item assets
          const item = schedule.find(item => item.id === editingAssetsItem);
          assetsData = item?.assets || '';
        }
        
        if (assetsData) {
          // Parse multiple assets (format: "Name1||Name2|Link2||Name3")
          const assetsArray = assetsData.split('||');
          
          assetsArray.forEach(assetString => {
            if (assetString.trim()) {
              const [name, link] = assetString.split('|');
              const hasLink = link && link.trim() !== '';
              
              const assetItem = document.createElement('div');
              assetItem.className = 'asset-item p-3 bg-slate-700 rounded-lg space-y-3';
              assetItem.innerHTML = `
                <div class="flex gap-3 items-center">
                  <input type="text" class="asset-name flex-1 px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500" placeholder="Asset name..." value="${name || ''}" />
                  <button type="button" class="toggle-link px-3 py-2 text-white rounded transition-colors text-sm ${hasLink ? 'bg-slate-600 hover:bg-slate-500' : 'bg-blue-600 hover:bg-blue-500'}">
                    ${hasLink ? '− Link' : '+ Link'}
                  </button>
                  <button type="button" class="remove-asset px-3 py-2 bg-red-600 hover:bg-red-500 text-white rounded transition-colors">Remove</button>
                </div>
                <div class="asset-link-container ${hasLink ? '' : 'hidden'}">
                  <input type="url" class="asset-link w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500" placeholder="Enter asset URL..." value="${link || ''}" />
                </div>
              `;
              
              // Add toggle link functionality
              const toggleBtn = assetItem.querySelector('.toggle-link');
              const linkContainer = assetItem.querySelector('.asset-link-container');
              const linkInput = assetItem.querySelector('.asset-link') as HTMLInputElement;
              
              toggleBtn?.addEventListener('click', () => {
                if (linkContainer?.classList.contains('hidden')) {
                  linkContainer.classList.remove('hidden');
                  toggleBtn.textContent = '− Link';
                  toggleBtn.classList.remove('bg-blue-600', 'hover:bg-blue-500');
                  toggleBtn.classList.add('bg-slate-600', 'hover:bg-slate-500');
                  linkInput?.focus();
                } else {
                  linkContainer?.classList.add('hidden');
                  toggleBtn.textContent = '+ Link';
                  toggleBtn.classList.remove('bg-slate-600', 'hover:bg-slate-500');
                  toggleBtn.classList.add('bg-blue-600', 'hover:bg-blue-500');
                  if (linkInput) linkInput.value = '';
                }
              });
              
              // Add remove functionality
              const removeBtn = assetItem.querySelector('.remove-asset');
              removeBtn?.addEventListener('click', () => {
                assetItem.remove();
              });
              
              assetsContainer.appendChild(assetItem);
            }
          });
        }
        
        // Always add at least one empty row
        if (assetsContainer.children.length === 0) {
          addAssetRow();
        }
      }
    }
  }, [showAssetsModal, editingAssetsItem, schedule, modalForm.assets]);

  // Initialize modal when opened
  useEffect(() => {
    if (showParticipantsModal && editingParticipantsItem !== null) {
      if (editingParticipantsItem === -1) {
        // Editing modal form speakers
        if (modalForm.speakers) {
          try {
            const speakers = JSON.parse(modalForm.speakers);
            setTempSpeakers(Array.isArray(speakers) ? speakers : []);
          } catch {
            setTempSpeakers([]);
          }
        } else {
          setTempSpeakers([]);
        }
      } else {
        // Editing existing schedule item speakers
        const item = schedule.find(item => item.id === editingParticipantsItem);
        if (item?.speakers) {
          try {
            // Try to parse existing speakers data
            const speakers = JSON.parse(item.speakers);
            setTempSpeakers(Array.isArray(speakers) ? speakers : []);
          } catch {
            // If parsing fails, start with empty array
            setTempSpeakers([]);
          }
        } else {
          setTempSpeakers([]);
        }
      }
    }
  }, [showParticipantsModal, editingParticipantsItem, schedule, modalForm.speakers]);

  // Supabase functions with debouncing
  const saveToSupabase = React.useCallback(
    debounce(async () => {
      if (!event?.id) return;
      
      try {
        const dataToSave = {
          event_id: event.id,
          event_name: event.name,
          event_date: event.date,
          schedule_items: schedule,
          custom_columns: customColumns,
          settings: {
            eventName,
            masterStartTime,
            lastSaved: new Date().toISOString()
          }
        };
        
        console.log('🔄 Auto-saving to Supabase:', {
          eventId: event.id,
          scheduleItemsCount: schedule.length,
          customColumnsCount: customColumns.length,
          eventName,
          masterStartTime
        });
        
        const result = await DatabaseService.saveRunOfShowData(dataToSave);
        console.log('✅ Auto-saved to Supabase successfully');
      } catch (error) {
        console.error('❌ Error auto-saving to Supabase:', error);
      }
    }, 1000), // Debounce for 1 second
    [event?.id, event?.name, event?.date, schedule, customColumns, eventName, masterStartTime]
  );

  // Debounce utility function
  function debounce<T extends (...args: any[]) => any>(func: T, wait: number): T {
    let timeout: NodeJS.Timeout;
    return ((...args: any[]) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    }) as T;
  }

  const loadFromSupabase = async () => {
    if (!event?.id) return;
    
    try {
      console.log('🔄 Loading from Supabase for event:', event.id);
      const data = await DatabaseService.getRunOfShowData(event.id);
      
      if (data) {
        console.log('📥 Data loaded from Supabase:', {
          scheduleItemsCount: data.schedule_items?.length || 0,
          customColumnsCount: data.custom_columns?.length || 0,
          eventName: data.settings?.eventName,
          masterStartTime: data.settings?.masterStartTime
        });
        
        setSchedule(data.schedule_items || []);
        setCustomColumns(data.custom_columns || []);
        if (data.settings?.eventName) setEventName(data.settings.eventName);
        if (data.settings?.masterStartTime) setMasterStartTime(data.settings.masterStartTime);
        console.log('✅ Run of Show data loaded from Supabase successfully');
      } else {
        console.log('ℹ️ No data found in Supabase for event:', event.id);
      }
    } catch (error) {
      console.error('❌ Error loading run of show data from Supabase:', error);
    }
  };

  // Initialize username and browser ID when component mounts
  useEffect(() => {
    if (event?.id) {
      // Generate or retrieve browser ID
      let savedBrowserId = localStorage.getItem(`browserId_${event.id}`);
      if (!savedBrowserId) {
        savedBrowserId = `browser_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        localStorage.setItem(`browserId_${event.id}`, savedBrowserId);
      }
      setBrowserId(savedBrowserId);

      // Check if username is already saved
      const savedUsername = localStorage.getItem(`username_${event.id}`);
      if (savedUsername) {
        setUsername(savedUsername);
        // Join the event
        joinEvent(savedUsername, savedBrowserId);
      } else {
        // Show username modal
        setShowUsernameModal(true);
      }

      loadFromSupabase();
    }
  }, [event?.id]);

  // Join event function
  const joinEvent = async (userName: string, browserId: string) => {
    if (!event?.id) return;
    
    try {
      const result = await DatabaseService.joinEvent(event.id, userName, browserId);
      if (result) {
        console.log('✅ Joined event successfully');
        // Start polling for active users
        startActiveUsersPolling();
      }
    } catch (error) {
      console.error('❌ Error joining event:', error);
    }
  };

  // Handle joining event
  const handleJoinEvent = async () => {
    if (!username.trim() || !browserId || !event?.id) return;
    
    // Save username to localStorage
    localStorage.setItem(`username_${event.id}`, username.trim());
    
    // Join the event
    await joinEvent(username.trim(), browserId);
    
    // Close modal
    setShowUsernameModal(false);
  };

  // Poll for active users
  const startActiveUsersPolling = () => {
    if (!event?.id) return;

    const pollActiveUsers = async () => {
      try {
        const users = await DatabaseService.getActiveUsers(event.id);
        setActiveUsers(users);
        
        // Update our own activity
        if (browserId) {
          await DatabaseService.updateUserActivity(event.id, browserId);
        }
      } catch (error) {
        console.error('❌ Error polling active users:', error);
      }
    };

    // Poll every 30 seconds
    const pollInterval = setInterval(pollActiveUsers, 30000);
    
    // Initial poll
    pollActiveUsers();

    // Cleanup on unmount
    return () => {
      clearInterval(pollInterval);
      if (event?.id && browserId) {
        DatabaseService.leaveEvent(event.id, browserId);
      }
    };
  };

  // Save data to localStorage whenever it changes
  useEffect(() => {
    if (event?.id) {
      localStorage.setItem(`runOfShowSchedule_${event.id}`, JSON.stringify(schedule));
      
      // Dispatch custom event to notify other tabs/windows of schedule update
      window.dispatchEvent(new CustomEvent('scheduleUpdated', {
        detail: { eventId: event.id, schedule }
      }));
      
      console.log('📝 Schedule saved and event dispatched for event:', event.id);
      
      // Auto-save to Supabase
      saveToSupabase();
    }
  }, [schedule, event?.id]);

  useEffect(() => {
    if (event?.id) {
      localStorage.setItem(`customColumns_${event.id}`, JSON.stringify(customColumns));
      // Auto-save to Supabase
      saveToSupabase();
    }
  }, [customColumns, event?.id]);

  useEffect(() => {
    if (event?.id) {
      localStorage.setItem(`eventName_${event.id}`, eventName);
      // Auto-save to Supabase when event name changes
      saveToSupabase();
    }
  }, [eventName, event?.id, saveToSupabase]);

  useEffect(() => {
    if (event?.id) {
      localStorage.setItem(`masterStartTime_${event.id}`, masterStartTime);
      // Auto-save to Supabase when master start time changes
      saveToSupabase();
    }
  }, [masterStartTime, event?.id, saveToSupabase]);

  // Sync timer data with full-screen timer window
  useEffect(() => {
    if (fullScreenTimerWindow && !fullScreenTimerWindow.closed) {
      const activeTimerIds = Object.keys(activeTimers);
      const currentItem = activeTimerIds.length > 0 
        ? schedule.find(item => activeTimers[item.id])
        : schedule.find(item => item.id === activeItemId);

      const timerData = {
        type: 'TIMER_UPDATE',
        isRunning: activeTimerIds.length > 0,
        elapsedTime: currentItem && timerProgress[currentItem.id] 
          ? timerProgress[currentItem.id].elapsed 
          : 0,
        totalDuration: currentItem 
          ? currentItem.durationHours * 3600 + currentItem.durationMinutes * 60 + currentItem.durationSeconds
          : 0,
        mainTimer: currentItem ? {
          cue: currentItem.customFields.cue || 'CUE',
          segmentName: currentItem.segmentName || ''
        } : null,
        secondaryTimer: secondaryTimer ? {
          itemId: secondaryTimer.itemId,
          remaining: secondaryTimer.remaining,
          duration: secondaryTimer.duration,
          cue: schedule.find(item => item.id === secondaryTimer.itemId)?.customFields.cue || 'CUE',
          segmentName: schedule.find(item => item.id === secondaryTimer.itemId)?.segmentName || ''
        } : null
      };

      fullScreenTimerWindow.postMessage(timerData, '*');
    }
  }, [activeTimers, timerProgress, activeItemId, schedule, masterStartTime, eventName, fullScreenTimerWindow, secondaryTimer]);




  const addScheduleItem = (newItem: Omit<ScheduleItem, 'id'> & { cue?: string }) => {
    // Generate random Timer ID
    const generateRandomTimerId = () => {
      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
      let result = '';
      for (let i = 0; i < 5; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return result;
    };
    
    const item: ScheduleItem = {
      ...newItem,
      id: Date.now(),
      timerId: generateRandomTimerId(),
      isIndented: newItem.isIndented || false,
      customFields: {
        cue: newItem.cue || ''
      }
    };
    if (insertRowPosition !== null) {
      // Insert at specific position (below the current row)
      setSchedule(prev => {
        const newSchedule = [...prev];
        newSchedule.splice(insertRowPosition + 1, 0, item);
        return newSchedule;
      });
      setInsertRowPosition(null);
    } else {
      // Add to end (normal behavior)
      setSchedule(prev => [...prev, item]);
    }
    setShowAddModal(false);
    // Reset form
    setModalForm({
      cue: '',
      day: selectedDay,
      programType: 'PreShow/End',
      shotType: '',
      segmentName: '',
      durationHours: 0,
      durationMinutes: 0,
      durationSeconds: 0,
      notes: '',
      assets: '',
      speakers: '',
      hasPPT: false,
      hasQA: false,
      timerId: '',
      isPublic: false,
      isIndented: false,
      customFields: {}
    });
  };

  const addCustomColumn = (name: string) => {
    const newColumn: CustomColumn = { name, id: Date.now().toString() };
    setCustomColumns(prev => [...prev, newColumn]);
    
    // Add the field to existing schedule items
    setSchedule(prev => prev.map(item => ({
      ...item,
      customFields: { ...item.customFields, [name]: '' }
    })));
    
    setShowCustomColumnModal(false);
  };

  const removeCustomColumn = (columnId: string) => {
    const column = customColumns.find(col => col.id === columnId);
    if (!column) return;

    setCustomColumns(prev => prev.filter(col => col.id !== columnId));
    
    // Remove the field from existing schedule items
    setSchedule(prev => prev.map(item => {
      const { [column.name]: removed, ...rest } = item.customFields;
      return { ...item, customFields: rest };
    }));
  };

  // Column resize handlers
  const handleResizeStart = (e: React.MouseEvent, columnName: string) => {
    e.preventDefault();
    e.stopPropagation();
    
    const startX = e.clientX;
    const startWidth = columnWidths[columnName as keyof typeof columnWidths] || 256;
    
    // Add dragging class to body for visual feedback
    document.body.style.cursor = 'col-resize';
    document.body.style.userSelect = 'none';
    
    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - startX;
      const newWidth = Math.max(100, startWidth + deltaX); // Minimum width of 100px
      
      setColumnWidths(prev => ({
        ...prev,
        [columnName]: newWidth
      }));
    };
    
    const handleMouseUp = () => {
      // Remove dragging styles
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  const handleCustomColumnResizeStart = (e: React.MouseEvent, columnId: string) => {
    e.preventDefault();
    e.stopPropagation();
    
    const startX = e.clientX;
    const startWidth = customColumnWidths[columnId] || 256;
    
    // Add dragging class to body for visual feedback
    document.body.style.cursor = 'col-resize';
    document.body.style.userSelect = 'none';
    
    const handleMouseMove = (e: MouseEvent) => {
      const deltaX = e.clientX - startX;
      const newWidth = Math.max(100, startWidth + deltaX); // Minimum width of 100px
      
      setCustomColumnWidths(prev => ({
        ...prev,
        [columnId]: newWidth
      }));
    };
    
    const handleMouseUp = () => {
      // Remove dragging styles
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  const toggleTimer = (itemId: number) => {
    if (activeTimers[itemId]) {
      // Stop timer and mark as completed
      clearInterval(activeTimers[itemId]);
      setActiveTimers(prev => {
        const newTimers = { ...prev };
        delete newTimers[itemId];
        return newTimers;
      });
      setCompletedCues(prev => ({ ...prev, [itemId]: true }));
      // Add to stopped items for inactive styling
      setStoppedItems(prev => new Set([...prev, itemId]));
      
      // Also complete any indented items that are part of this CUE group
      const currentIndex = schedule.findIndex(item => item.id === itemId);
      if (currentIndex !== -1) {
        // Find all indented items that follow this CUE until the next non-indented item
        for (let i = currentIndex + 1; i < schedule.length; i++) {
          if (schedule[i].isIndented) {
            setCompletedCues(prev => ({ ...prev, [schedule[i].id]: true }));
            setStoppedItems(prev => new Set([...prev, schedule[i].id]));
          } else {
            // Stop when we hit a non-indented item (next CUE group)
            break;
          }
        }
      }
      
      // Clear dependent row highlighting when timer is stopped
      setLoadedCueDependents(new Set());
      
      setTimerProgress(prev => {
        const newProgress = { ...prev };
        delete newProgress[itemId];
        return newProgress;
      });
    } else {
      // Don't allow starting a new timer if any timer is already running
      if (Object.keys(activeTimers).length > 0) {
        return; // Exit early if any timer is running
      }

      // Start new timer
      const item = schedule.find(s => s.id === itemId);
      if (item) {
        const totalSeconds = item.durationHours * 3600 + item.durationMinutes * 60 + item.durationSeconds;
        
        setTimerProgress(prev => ({ ...prev, [itemId]: { elapsed: 0, total: totalSeconds } }));
        
        const timer = setInterval(() => {
          setTimerProgress(prev => {
            const current = prev[itemId];
            if (current) {
              return { ...prev, [itemId]: { ...current, elapsed: current.elapsed + 1 } };
            }
            return prev;
          });
        }, 1000);
        
        setActiveTimers(prev => ({ ...prev, [itemId]: timer }));
        setCompletedCues(prev => ({ ...prev, [itemId]: false }));
        // Remove from stopped items when starting
        setStoppedItems(prev => {
          const newStopped = new Set(prev);
          newStopped.delete(itemId);
          
          // Also remove any indented items that belong to this CUE group
          const currentIndex = schedule.findIndex(item => item.id === itemId);
          if (currentIndex !== -1) {
            for (let i = currentIndex + 1; i < schedule.length; i++) {
              if (schedule[i].isIndented) {
                newStopped.delete(schedule[i].id);
              } else {
                // Stop when we hit a non-indented item (next CUE group)
                break;
              }
            }
          }
          
          return newStopped;
        });
      }
    }
  };

  // Start secondary timer for indented CUEs (like videos)
  const startSecondaryTimer = (itemId: number) => {
    const item = schedule.find(s => s.id === itemId);
    if (item && item.isIndented) {
      const totalSeconds = item.durationHours * 3600 + item.durationMinutes * 60 + item.durationSeconds;
      
      // Clear any existing secondary timer
      if (secondaryTimerInterval) {
        clearInterval(secondaryTimerInterval);
      }
      
      setSecondaryTimer({
        itemId,
        duration: totalSeconds,
        remaining: totalSeconds,
        isActive: true
      });
      
      // Start countdown
      const timer = setInterval(() => {
        setSecondaryTimer(prev => {
          if (prev && prev.remaining > 0) {
            return { ...prev, remaining: prev.remaining - 1 };
          } else if (prev && prev.remaining === 0) {
            // Timer finished, clear it
            clearInterval(timer);
            setSecondaryTimerInterval(null);
            return null;
          }
          return prev;
        });
      }, 1000);
      
      setSecondaryTimerInterval(timer);
    }
  };

  // Stop secondary timer
  const stopSecondaryTimer = () => {
    if (secondaryTimerInterval) {
      clearInterval(secondaryTimerInterval);
      setSecondaryTimerInterval(null);
    }
    setSecondaryTimer(null);
  };

  const deleteScheduleItem = (itemId: number) => {
    if (window.confirm('Delete this schedule item?')) {
      setSchedule(prev => prev.filter(item => item.id !== itemId));
      setActiveRowMenu(null); // Close menu after deletion
    }
  };

  const duplicateScheduleItem = (itemId: number) => {
    const itemToDuplicate = schedule.find(item => item.id === itemId);
    if (itemToDuplicate) {
      const newItem = {
        ...itemToDuplicate,
        id: Date.now(),
        segmentName: `${itemToDuplicate.segmentName} (Copy)`
      };
      setSchedule(prev => [...prev, newItem]);
      setActiveItemMenu(null);
    }
  };

  const moveScheduleItem = (itemId: number, direction: 'up' | 'down') => {
    const currentIndex = schedule.findIndex(item => item.id === itemId);
    if (currentIndex === -1) return;

    const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
    if (newIndex < 0 || newIndex >= schedule.length) return;

    setSchedule(prev => {
      const newSchedule = [...prev];
      [newSchedule[currentIndex], newSchedule[newIndex]] = [newSchedule[newIndex], newSchedule[currentIndex]];
      return newSchedule;
    });
    setActiveRowMenu(null);
  };

  const moveToSpecificRow = (itemId: number, targetRowNumber: number) => {
    const currentIndex = schedule.findIndex(item => item.id === itemId);
    if (currentIndex === -1) return;

    const targetIndex = targetRowNumber - 1; // Convert to 0-based index
    if (targetIndex < 0 || targetIndex >= schedule.length || targetIndex === currentIndex) return;

    setSchedule(prev => {
      const newSchedule = [...prev];
      const item = newSchedule[currentIndex];
      newSchedule.splice(currentIndex, 1);
      newSchedule.splice(targetIndex, 0, item);
      return newSchedule;
    });
    setActiveRowMenu(null);
  };

  const calculateStartTime = (index: number) => {
    // If master start time is empty, return blank
    if (!masterStartTime) return '';
    
    // If this item is indented, return empty string (no start time)
    const currentItem = schedule[index];
    if (currentItem?.isIndented) {
      return '';
    }
    
    let totalSeconds = 0;
    for (let i = 0; i < index; i++) {
      const item = schedule[i];
      // Only add duration for non-indented items
      if (!item.isIndented) {
        totalSeconds += item.durationHours * 3600 + item.durationMinutes * 60 + item.durationSeconds;
      }
    }
    
    const [hours, minutes] = masterStartTime.split(':').map(Number);
    const startSeconds = hours * 3600 + minutes * 60;
    const totalStartSeconds = startSeconds + totalSeconds;
    
    const finalHours = Math.floor(totalStartSeconds / 3600) % 24;
    const finalMinutes = Math.floor((totalStartSeconds % 3600) / 60);
    
    // Convert to 12-hour format
    const date = new Date();
    date.setHours(finalHours, finalMinutes, 0, 0);
    return date.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
  };

  // Get available days based on event duration
  const getAvailableDays = () => {
    const days = event?.numberOfDays || 5; // Default to 5 days if not specified
    console.log('Event data:', event, 'Number of days:', days); // Debug log
    return Array.from({ length: days }, (_, i) => i + 1);
  };

  // Filter schedule by selected day
  const getFilteredSchedule = () => {
    return schedule.filter(item => (item.day || 1) === selectedDay);
  };

  // Handle scroll for grid headers visibility
  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      setShowGridHeaders(scrollTop > 100);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Scroll synchronization between header and main grid
  useEffect(() => {
    const mainScrollContainer = document.getElementById('main-scroll-container');

    if (!mainScrollContainer) return;

    let isSyncing = false;

    const syncScroll = (source: HTMLElement, target: HTMLElement) => {
      if (isSyncing) return;
      isSyncing = true;
      target.scrollLeft = source.scrollLeft;
      // Use requestAnimationFrame to reset the flag after the scroll event has been processed
      requestAnimationFrame(() => {
        isSyncing = false;
      });
    };

    const handleMainScroll = () => {
      // Sync with sticky header if it exists
      const stickyHeaderContainer = document.querySelector('.sticky-header-scroll-container');
      if (stickyHeaderContainer) {
        syncScroll(mainScrollContainer, stickyHeaderContainer as HTMLElement);
      }
    };

    const handleStickyHeaderScroll = () => {
      const stickyHeaderContainer = document.querySelector('.sticky-header-scroll-container');
      if (stickyHeaderContainer) {
        syncScroll(stickyHeaderContainer as HTMLElement, mainScrollContainer);
      }
    };

    mainScrollContainer.addEventListener('scroll', handleMainScroll);

    // Add listener for sticky header when it appears
    const observer = new MutationObserver(() => {
      const stickyHeaderContainer = document.querySelector('.sticky-header-scroll-container');
      if (stickyHeaderContainer) {
        stickyHeaderContainer.addEventListener('scroll', handleStickyHeaderScroll);
      }
    });

    observer.observe(document.body, { childList: true, subtree: true });

    return () => {
      mainScrollContainer.removeEventListener('scroll', handleMainScroll);
      observer.disconnect();
    };
  }, []);

  // Auto-scroll to active row when activeItemId changes
  useEffect(() => {
    if (activeItemId !== null) {
      // Small delay to ensure DOM is updated
      setTimeout(() => {
        scrollToActiveRow();
      }, 100);
    }
  }, [activeItemId, isFollowEnabled]);

        // Auto-scroll to active timer row when timers start/stop
        useEffect(() => {
          if (isFollowEnabled && Object.keys(activeTimers).length > 0) {
            const activeTimerId = parseInt(Object.keys(activeTimers)[0]);
            const activeRow = document.querySelector(`[data-item-id="${activeTimerId}"]`);
            if (activeRow) {
              setTimeout(() => {
                // Find the column headers (main grid headers) to ensure row doesn't scroll past them
                const columnHeaders = document.querySelector('#main-scroll-container .h-24');
                let headerOffset = 100; // Default fallback
                
                if (columnHeaders) {
                  const headerRect = columnHeaders.getBoundingClientRect();
                  const containerRect = document.querySelector('#main-scroll-container')?.getBoundingClientRect();
                  if (containerRect) {
                    // Calculate the offset from the top of the viewport to the bottom of column headers
                    // Use getBoundingClientRect for consistent positioning regardless of horizontal scroll
                    headerOffset = headerRect.bottom - containerRect.top - 120; // -120px gap - split the difference
                  }
                }
                
                // Calculate position: ensure row doesn't go above column headers
                // Use getBoundingClientRect for consistent positioning regardless of horizontal scroll
                const elementRect = (activeRow as HTMLElement).getBoundingClientRect();
                const containerRect = document.querySelector('#main-scroll-container')?.getBoundingClientRect();
                if (containerRect) {
                  const scrollPosition = elementRect.top - containerRect.top - headerOffset;
                  
                  // Scroll to position the row below the column headers
                  window.scrollTo({
                    top: scrollPosition,
                    behavior: 'smooth'
                  });
                }
              }, 100);
            }
          }
        }, [activeTimers, isFollowEnabled]);

  if (!event) {
    return (
      <div className="min-h-screen bg-slate-900 text-white flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">No Event Selected</h1>
          <button
            onClick={() => navigate('/')}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-500 rounded"
          >
            Back to Event List
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 text-slate-200">
      {/* Username Modal */}
      {showUsernameModal && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-slate-800 p-8 rounded-lg shadow-xl max-w-md w-full mx-4">
            <h2 className="text-2xl font-bold mb-6 text-white text-center">Enter Your Name</h2>
            <p className="text-slate-300 text-center mb-6">
              Please enter your name to join this Run of Show session
            </p>
            
            <div className="mb-6">
              <input
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                placeholder="Enter your name"
                className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-md text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 text-center text-lg"
                onKeyPress={(e) => {
                  if (e.key === 'Enter' && username.trim()) {
                    handleJoinEvent();
                  }
                }}
                autoFocus
              />
            </div>
            
            <button
              onClick={handleJoinEvent}
              disabled={!username.trim()}
              className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-slate-600 disabled:cursor-not-allowed text-white py-3 px-4 rounded-md font-medium text-lg transition-colors"
            >
              Join Session
            </button>
          </div>
        </div>
      )}
      <style>
        {`
          select {
            border: 2px solid #64748b !important;
            border-radius: 6px !important;
          }
          select:focus {
            border-color: #3b82f6 !important;
            outline: none !important;
          }
          select option {
            background-color: #1e293b !important;
            color: #ffffff !important;
            border-bottom: 1px solid #475569 !important;
            padding: 8px 12px !important;
            margin: 0 !important;
          }
          select option:hover {
            background-color: #334155 !important;
          }
          select option:checked {
            background-color: #3b82f6 !important;
          }
        `}
      </style>
      {/* Sticky Header - Always Visible */}
      <div className="sticky top-0 z-50 bg-slate-900 shadow-lg border-b border-slate-600">
        <div className="py-2">
          <div className="flex justify-between items-center mb-2 px-8">
            <div className="flex items-center gap-3">
              <button
                onClick={() => navigate('/')}
                className="px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white font-semibold rounded-lg transition-colors"
              >
                ← Back to Events
              </button>
              
              
              {/* Menu Dropdown */}
              <div className="relative">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowMenuDropdown(!showMenuDropdown);
                  }}
                  className="px-3 py-2 bg-slate-600 hover:bg-slate-500 text-white rounded-lg transition-colors"
                  title="Menu"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                  </svg>
                </button>
                
                {showMenuDropdown && (
                  <div className="absolute top-full left-0 mt-1 w-48 bg-slate-800 border border-slate-600 rounded-lg shadow-lg z-50">
                    <div className="py-1">
                      <button
                        onClick={openFullScreenTimer}
                        className="w-full px-4 py-2 text-left text-white hover:bg-slate-700 transition-colors flex items-center gap-3"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Full Timer
                      </button>
                      <button
                        onClick={() => {
                          setShowMenuDropdown(false);
                          // Navigate to Reports page
                          const reportsUrl = `/reports?eventId=${event?.id}&eventName=${encodeURIComponent(event?.name || '')}`;
                          window.open(reportsUrl, '_blank');
                        }}
                        className="w-full px-4 py-2 text-left text-white hover:bg-slate-700 transition-colors flex items-center gap-3"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Reports and Printing
                      </button>
                      <button
                        onClick={() => {
                          setShowMenuDropdown(false);
                          // Pass event data to Graphics Links page
                          const graphicsLinksUrl = `/graphics-links?eventId=${event?.id}&eventName=${encodeURIComponent(event?.name || '')}`;
                          window.open(graphicsLinksUrl, '_blank');
                        }}
                        className="w-full px-4 py-2 text-left text-white hover:bg-slate-700 transition-colors flex items-center gap-3"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                        </svg>
                        Graphic Links
                      </button>
                      <button
                        onClick={() => {
                          setShowMenuDropdown(false);
                          console.log('=== TEST JSON DOWNLOAD ===');
                          console.log('Event:', event);
                          console.log('Schedule length:', schedule.length);
                          console.log('Full schedule:', schedule);
                          console.log('Master start time:', masterStartTime);
                          
                          // Generate clean JSON for VMIX
                          const publicItems = schedule.filter(item => item.isPublic === true);
                          console.log('Public items found:', publicItems);
                          
                          const jsonData = {
                            event: event?.name || 'Current Event',
                            generated: new Date().toISOString(),
                            schedule: publicItems.map(item => {
                              const itemIndex = schedule.findIndex(s => s.id === item.id);
                              const calculatedStartTime = calculateStartTime(itemIndex);
                              console.log(`Item ${item.segmentName}: index=${itemIndex}, startTime=${calculatedStartTime}`);
                              
                              return {
                                segmentName: item.segmentName || 'Untitled Segment',
                                startTime: calculatedStartTime || 'No Start Time'
                              };
                            })
                          };

                          console.log('Final JSON data:', jsonData);
                          const jsonString = JSON.stringify(jsonData, null, 2);
                          const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8;' });
                          const url = URL.createObjectURL(blob);
                          
                          // Open in new tab - JSON file will display in browser
                          window.open(url, '_blank');
                          console.log('=== END TEST JSON DOWNLOAD ===');
                        }}
                        className="w-full px-4 py-2 text-left text-white hover:bg-slate-700 transition-colors flex items-center gap-3"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Test JSON Download
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            {/* Event Controls - Moved to center */}
            <div className="flex items-center gap-6">
              <div className="flex items-center gap-2">
                <label className="text-white font-semibold">Event Name:</label>
                <input
                  type="text"
                  value={eventName}
                  onChange={(e) => setEventName(e.target.value)}
                  placeholder="Enter Event Name"
                  className="px-4 py-2 bg-slate-700 border-2 border-slate-600 rounded-lg text-white focus:border-blue-500 focus:outline-none w-64"
                />
                
                {(event?.numberOfDays && event.numberOfDays > 1) && (
                  <>
                    <label className="text-white font-semibold">Working Day:</label>
                    <select
                      value={selectedDay}
                      onChange={(e) => setSelectedDay(parseInt(e.target.value))}
                      className="px-4 py-2 bg-slate-700 border-2 border-slate-600 rounded-lg text-white focus:border-blue-500 focus:outline-none w-32"
                    >
                      {Array.from({ length: event.numberOfDays }, (_, i) => (
                        <option key={i + 1} value={i + 1}>Day {i + 1}</option>
                      ))}
                    </select>
                  </>
                )}
              </div>
              <div className="flex items-center gap-2">
                <label className="text-white font-semibold">Start Time:</label>
                <input
                  type="time"
                  value={masterStartTime}
                  onChange={(e) => setMasterStartTime(e.target.value)}
                  className="px-4 py-2 bg-slate-700 border-2 border-slate-600 rounded-lg text-white focus:border-blue-500 focus:outline-none w-48"
                  style={{
                    colorScheme: 'dark'
                  }}
                />
              </div>
            </div>
            
            {/* Countdown Timer and Action Buttons - Top Right */}
            <div className="flex items-center gap-6">
              <div className="text-center">
                {Object.keys(activeTimers).length > 0 ? (
                  <div className="text-sm text-slate-300">
                    RUNNING - {schedule.find(item => activeTimers[item.id])?.customFields.cue || 'CUE##'}
                  </div>
                ) : activeItemId ? (
                  <div className="text-sm text-slate-300">
                    LOADED - {schedule.find(item => item.id === activeItemId)?.customFields.cue || 'CUE##'}
                  </div>
                ) : (
                  <div className="text-sm text-slate-300">
                    No CUE Selected
                  </div>
                )}
                {secondaryTimer && (
                  <div className="text-sm text-orange-400 mt-1">
                    PLAYING - {schedule.find(item => item.id === secondaryTimer.itemId)?.customFields.cue || 'CUE'} ({Math.floor(secondaryTimer.remaining / 3600)}:{(Math.floor((secondaryTimer.remaining % 3600) / 60)).toString().padStart(2, '0')}:{(secondaryTimer.remaining % 60).toString().padStart(2, '0')})
                  </div>
                )}
              </div>
              
              {/* Timer Display with Color */}
              <div className="text-3xl font-mono bg-slate-800 px-6 py-3 rounded-lg border border-slate-600" style={{ color: getCountdownColor() }}>
                {formatTime(getRemainingTime())}
              </div>
            </div>
          </div>

          {/* Progress Bar - Full Width */}
          <div className="px-8 mb-2">
            <div className="w-full h-2 bg-slate-700 rounded-full overflow-hidden border border-slate-600 relative">
              <div 
                className="h-full transition-all duration-1000 absolute top-0 right-0"
                style={{ 
                  width: `${getRemainingPercentage()}%`,
                  background: getProgressBarColor()
                }}
              />
            </div>
          </div>

          {/* Timer Control Panel */}
          <div className="px-8 pb-2">
            <div className="flex items-center justify-between">
              {/* Active Users Indicator */}
              {username && (
                <div className="flex items-center gap-4">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                    <span className="text-sm text-slate-300">
                      {username}
                    </span>
                  </div>
                  {activeUsers.length > 1 && (
                    <div className="flex items-center gap-1">
                      <span className="text-xs text-slate-400">
                        {activeUsers.length} users online:
                      </span>
                      <div className="flex gap-1">
                        {activeUsers.slice(0, 3).map((user, index) => (
                          <span
                            key={user.browser_id}
                            className={`text-xs px-2 py-1 rounded ${
                              user.browser_id === browserId 
                                ? 'bg-blue-600 text-white' 
                                : 'bg-slate-600 text-slate-300'
                            }`}
                          >
                            {user.username}
                          </span>
                        ))}
                        {activeUsers.length > 3 && (
                          <span className="text-xs text-slate-400">
                            +{activeUsers.length - 3} more
                          </span>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              <div className="flex items-center gap-4">
                {/* Filter View Button */}
              <button
                onClick={() => setShowFilterModal(true)}
                className="px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white text-sm font-medium rounded transition-colors"
                title="Open Filter View"
              >
                Filter View
              </button>
              
              {/* Time Toast Toggle Button */}
              <button
                onClick={() => setShowTimeToast(!showTimeToast)}
                className={`px-4 py-2 text-white text-sm font-medium rounded transition-colors ${
                  showTimeToast 
                    ? 'bg-green-600 hover:bg-green-500' 
                    : 'bg-slate-600 hover:bg-slate-500'
                }`}
                title={showTimeToast ? "Disable Time Toast" : "Enable Time Toast"}
              >
                ⏰ Time Toast
              </button>
              
              
              {/* Follow Button */}
              <button
                onClick={() => setIsFollowEnabled(!isFollowEnabled)}
                className={`px-4 py-2 text-white text-sm font-medium rounded transition-colors ${
                  isFollowEnabled 
                    ? 'bg-blue-600 hover:bg-blue-500' 
                    : 'bg-slate-600 hover:bg-slate-500'
                }`}
                title={isFollowEnabled ? "Disable auto-scroll to active row" : "Enable auto-scroll to active row"}
              >
                🎯 Follow
              </button>
              
              {/* Duration Controls */}
              <div className="flex items-center gap-2">
                <span className="text-white text-sm font-medium">Duration:</span>
                <button
                  onClick={() => adjustTimerDuration(-300)}
                  className="w-8 h-8 bg-red-700 hover:bg-red-600 text-white text-sm font-bold rounded"
                  title="Subtract 5 minutes"
                >
                  -5
                </button>
                <button
                  onClick={() => adjustTimerDuration(-60)}
                  className="w-8 h-8 bg-red-600 hover:bg-red-500 text-white text-sm font-bold rounded"
                  title="Subtract 1 minute"
                >
                  -1
                </button>
                <button
                  onClick={() => adjustTimerDuration(60)}
                  className="w-8 h-8 bg-blue-600 hover:bg-blue-500 text-white text-sm font-bold rounded"
                  title="Add 1 minute"
                >
                  +1
                </button>
                <button
                  onClick={() => adjustTimerDuration(300)}
                  className="w-8 h-8 bg-blue-700 hover:bg-blue-600 text-white text-sm font-bold rounded"
                  title="Add 5 minutes"
                >
                  +5
                </button>
              </div>
              
              {/* Messages Button */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setShowMessagesModal(true)}
                  className={`px-4 py-2 text-white text-sm font-medium rounded transition-colors ${
                    messageEnabled 
                      ? 'bg-purple-600 hover:bg-purple-500 ring-4 ring-inset ring-green-500' 
                      : 'bg-purple-600 hover:bg-purple-500'
                  }`}
                  title="Send Messages to Full Screen Timer"
                >
                  Messages
                </button>
                
                {/* Toggle Off Button - Only show when message is active */}
                {messageEnabled && (
                  <button
                    onClick={() => {
                      // Turn off message
                      setMessageEnabled(false);
                      setMessageText('');
                      if (fullScreenTimerWindow && !fullScreenTimerWindow.closed) {
                        fullScreenTimerWindow.postMessage({
                          type: 'MESSAGE_UPDATE',
                          message: '',
                          enabled: false
                        }, '*');
                      }
                    }}
                    className="px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white text-sm font-medium rounded transition-colors animate-pulse"
                    title="Turn Off Message"
                  >
                    Click to Turn Off
                  </button>
                )}
              </div>
            </div>
          </div>

          {/* Duplicate Grid Headers - Fixed at Top */}
          <div className={`px-8 transition-all duration-500 ease-in-out overflow-hidden ${showGridHeaders ? 'max-h-80 opacity-100 -mb-6' : 'max-h-0 opacity-0 mb-0'}`}>
            <div className="bg-slate-800 rounded-xl p-4 shadow-2xl" style={{ transform: 'scale(0.75)', transformOrigin: 'top center', width: '127.67%', marginLeft: '-13.83%' }}>
              <div className="flex border-2 border-slate-600 rounded-lg overflow-hidden bg-slate-900">
                {/* Row Number Column Header */}
                <div className="w-12 flex-shrink-0 bg-slate-900 border-r-2 border-slate-600">
                  <div className="h-16 bg-slate-700 border-b-3 border-slate-600 flex items-center justify-center">
                    <span className="text-white font-bold text-xs">#</span>
                  </div>
                </div>
                
                {/* CUE Column Header */}
                <div className="w-40 flex-shrink-0 bg-slate-900" style={{ borderRight: '6px solid #475569' }}>
                  <div className="h-16 bg-slate-700 border-b-3 border-slate-600 flex items-center justify-center">
                    <span className="text-white font-bold text-lg">CUE</span>
                  </div>
                </div>

                {/* Center Scrollable Section Headers */}
                <div className="flex-1 overflow-x-auto sticky-header-scroll-container" style={{ scrollbarWidth: 'thin' }}>
                  <div className="min-w-max">
                    <div className="h-16 bg-slate-700 border-b-3 border-slate-600 flex">
                      {visibleColumns.start && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.start }}
                        >
                          <span className="text-white font-bold">Start</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'start')}
                          />
                        </div>
                      )}
                      {visibleColumns.programType && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.programType }}
                        >
                          <span className="text-white font-bold">Program Type</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'programType')}
                          />
                        </div>
                      )}
                      {visibleColumns.duration && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.duration }}
                        >
                          <div className="text-center">
                            <div className="text-white font-bold">Duration</div>
                            <div className="text-xs text-slate-400">HH MM SS</div>
                          </div>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'duration')}
                          />
                        </div>
                      )}
                      {visibleColumns.segmentName && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.segmentName }}
                        >
                          <span className="text-white font-bold">Segment Name</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'segmentName')}
                          />
                        </div>
                      )}
                      {visibleColumns.shotType && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.shotType }}
                        >
                          <span className="text-white font-bold">Shot Type</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'shotType')}
                          />
                        </div>
                      )}
                      {visibleColumns.pptQA && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.pptQA }}
                        >
                          <span className="text-white font-bold">PPT/Q&A</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'pptQA')}
                          />
                        </div>
                      )}
                      {visibleColumns.notes && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.notes }}
                        >
                          <span className="text-white font-bold">Notes</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'notes')}
                          />
                        </div>
                      )}
                      {visibleColumns.assets && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.assets }}
                        >
                          <span className="text-white font-bold">Assets</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'assets')}
                          />
                        </div>
                      )}
                      {visibleColumns.participants && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.participants }}
                        >
                          <span className="text-white font-bold">Participants</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'participants')}
                          />
                        </div>
                      )}
                      {visibleColumns.public && (
                        <div 
                          className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                          style={{ width: columnWidths.public }}
                        >
                          <span className="text-white font-bold">Public</span>
                          <div 
                            className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                            onMouseDown={(e) => handleResizeStart(e, 'public')}
                          />
                        </div>
                      )}
                      {customColumns.map(column => 
                        visibleCustomColumns[column.id] !== false && (
                          <div 
                            key={column.id} 
                            className="px-4 py-2 border-r border-slate-600 flex items-center justify-center relative flex-shrink-0"
                            style={{ width: customColumnWidths[column.id] || 256 }}
                          >
                            <span className="text-white font-bold">{column.name}</span>
                            <div 
                              className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                              onMouseDown={(e) => handleCustomColumnResizeStart(e, column.id)}
                            />
                          </div>
                        )
                      )}
                    </div>
                  </div>
                </div>

                {/* Timer Column Header */}
                <div className="w-32 flex-shrink-0 bg-slate-900" style={{ borderLeft: '6px solid #475569' }}>
                  <div className="h-16 bg-slate-700 border-b-3 border-slate-600 flex items-center justify-center">
                    <span className="text-white font-bold text-base">Timer</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>


      {/* Schedule Container */}
      <div className="max-w-[95%] mx-auto px-6">
        <div className="bg-slate-800 rounded-xl p-4 shadow-2xl" style={{ transform: 'scale(0.75)', transformOrigin: 'top center', width: '133.33%', marginLeft: '-16.67%' }}>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold text-white">
              Schedule{(event?.numberOfDays && event.numberOfDays > 1) ? ` - Day ${selectedDay}` : ''}
            </h2>
            
            {/* Action Buttons */}
            <div className="flex gap-3">
              <button
                onClick={() => {
                  setShowAddModal(true);
                  // Reset form to defaults
                  setModalForm({
                    cue: '',
                    day: selectedDay,
                    programType: 'PreShow/End',
                    shotType: '',
                    segmentName: '',
                    durationHours: 0,
                    durationMinutes: 0,
                    durationSeconds: 0,
                    notes: '',
                    assets: '',
                    speakers: '',
                    hasPPT: false,
                    hasQA: false,
                    timerId: '',
                    isPublic: false,
                    isIndented: false,
                    customFields: {}
                  });
                }}
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded text-sm"
              >
                + Item
              </button>
              <button
                onClick={() => setShowCustomColumnModal(true)}
                className="px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white font-medium rounded text-sm"
              >
                + Column
              </button>
              <button
                onClick={resetAllStates}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded text-sm"
              >
                Reset
              </button>
            </div>
          </div>
          
          {/* Schedule Layout */}
          <div className="flex border-2 border-slate-600 rounded-lg overflow-hidden bg-slate-900">
            {/* Row Number Column */}
            <div className="w-12 flex-shrink-0 bg-slate-900 border-r-2 border-slate-600">
              {/* Header */}
              <div className="h-24 bg-slate-700 border-b-3 border-slate-600 flex items-center justify-center">
                <span className="text-white font-bold text-xs">#</span>
              </div>
              
              {/* Row Numbers */}
              {getFilteredSchedule().length === 0 ? (
                <div className="h-24 flex items-center justify-center text-slate-500">
                  -
                </div>
              ) : (
                                 getFilteredSchedule().map((item, index) => (
                   <div 
                     key={`${item.id}-${item.notes?.length || 0}-${item.speakers?.length || 0}`}
                     className={`border-b-2 border-slate-600 flex items-center justify-center gap-1 ${
                       activeTimers[item.id]
                         ? 'bg-green-900 border-green-500' 
                         : activeItemId === item.id
                         ? 'bg-blue-900 border-blue-500'
                         : completedCues[item.id]
                         ? 'bg-purple-900 border-purple-500'
                         : stoppedItems.has(item.id)
                         ? 'bg-gray-900 border-gray-700 opacity-40'
                         : loadedCueDependents.has(item.id)
                         ? 'bg-amber-800 border-amber-600'
                         : index % 2 === 0 ? 'bg-slate-800' : 'bg-slate-900'
                     }`}
                     style={{ minHeight: `calc(${getRowHeight(item.notes, item.speakers)} + 1.5px)` }}
                   >
                    <div className="flex flex-col items-center gap-1">
                      <button
                        onClick={() => {
                          const targetRow = prompt(`Move to row (1-${getFilteredSchedule().length}):`, (index + 1).toString());
                          if (targetRow && !isNaN(Number(targetRow))) {
                            moveToSpecificRow(item.id, Number(targetRow));
                          }
                        }}
                        className="w-5 h-5 bg-purple-600 hover:bg-purple-500 text-white rounded flex items-center justify-center text-xs font-bold transition-colors"
                        title="Jump to Row"
                      >
                        #
                      </button>
                      <span className="text-white font-bold text-lg">
                        {index + 1}
                      </span>
                      <button
                        onClick={() => {
                          setInsertRowPosition(index);
                          setShowAddModal(true);
                        }}
                        className="w-5 h-5 bg-blue-600 hover:bg-blue-500 text-white rounded flex items-center justify-center text-xs font-bold transition-colors"
                        title={`Insert row after row ${index + 1}`}
                      >
                        +
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>
            
            {/* CUE Column with Controls */}
            <div className="w-40 flex-shrink-0 bg-slate-900" style={{ borderRight: '6px solid #475569' }}>
              {/* Header */}
              <div className="h-24 bg-slate-700 border-b-3 border-slate-600 flex items-center justify-center">
                <span className="text-white font-bold text-lg">CUE</span>
              </div>
              
                             {/* CUEs with Controls */}
               {getFilteredSchedule().length === 0 ? (
                 <div className="h-24 flex items-center justify-center text-slate-500">
                   No items
                 </div>
               ) : (
                 getFilteredSchedule().map((item, index) => (
                   <div 
                     key={`${item.id}-${item.notes?.length || 0}-${item.speakers?.length || 0}`}
                     className={`border-b-2 border-slate-600 flex flex-col items-center justify-center gap-1 ${
                       index % 2 === 0 ? 'bg-slate-800' : 'bg-slate-900'
                     }`}
                     style={{ minHeight: `calc(${getRowHeight(item.notes, item.speakers)} + 1.5px)` }}
                   >
                    <input
                      type="text"
                      value={item.customFields.cue || 'CUE'}
                      onChange={(e) => {
                        setSchedule(prev => prev.map(scheduleItem => 
                          scheduleItem.id === item.id 
                            ? { 
                                ...scheduleItem, 
                                customFields: { 
                                  ...scheduleItem.customFields, 
                                  cue: e.target.value 
                                } 
                              }
                            : scheduleItem
                        ));
                      }}
                      className="w-24 text-center text-lg px-1 py-1 border rounded bg-slate-700 border-slate-600 text-white focus:outline-none focus:border-blue-500"
                    />
                    <div className="flex gap-1">
                      <button
                        onClick={() => {
                          setSchedule(prev => prev.map(scheduleItem => 
                            scheduleItem.id === item.id 
                              ? { ...scheduleItem, isIndented: !scheduleItem.isIndented }
                              : scheduleItem
                          ));
                        }}
                        className="w-7 h-7 bg-slate-600 hover:bg-slate-500 text-white flex items-center justify-center text-lg rounded font-bold"
                        title={item.isIndented ? "Unindent (group with row above)" : "Indent (group with row above)"}
                      >
                        {item.isIndented ? '↗' : '↘'}
                      </button>
                      <button
                        onClick={() => moveScheduleItem(item.id, 'up')}
                        disabled={index === 0}
                        className="w-7 h-7 bg-slate-600 hover:bg-slate-500 disabled:opacity-30 disabled:cursor-not-allowed text-white flex items-center justify-center text-lg rounded font-bold"
                        title="Move Up"
                      >
                        ↑
                      </button>
                      <button
                        onClick={() => moveScheduleItem(item.id, 'down')}
                        disabled={index === getFilteredSchedule().length - 1}
                        className="w-7 h-7 bg-slate-600 hover:bg-slate-500 disabled:opacity-30 disabled:cursor-not-allowed text-white flex items-center justify-center text-lg rounded font-bold"
                        title="Move Down"
                      >
                        ↓
                      </button>
                      <button
                        onClick={() => deleteScheduleItem(item.id)}
                        className="w-7 h-7 bg-red-600 hover:bg-red-500 text-white flex items-center justify-center text-lg rounded font-bold"
                        title="Delete"
                      >
                        ×
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Center Scrollable Section - Main Schedule Data */}
            <div id="main-scroll-container" className="flex-1 overflow-x-auto" style={{ scrollbarWidth: 'thin' }}>
              <div className="min-w-max">
                {/* Header Row */}
                <div className="h-24 bg-slate-700 border-b-3 border-slate-600 flex">
                  {visibleColumns.start && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.start }}
                    >
                      <span className="text-white font-bold">Start</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'start')}
                      />
                    </div>
                  )}
                  {visibleColumns.programType && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.programType }}
                    >
                      <span className="text-white font-bold">Program Type</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'programType')}
                      />
                    </div>
                  )}
                  {visibleColumns.duration && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.duration }}
                    >
                      <div className="text-center">
                        <div className="text-white font-bold">Duration</div>
                        <div className="text-xs text-slate-400">HH MM SS</div>
                      </div>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'duration')}
                      />
                    </div>
                  )}
                  {visibleColumns.segmentName && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.segmentName }}
                    >
                      <span className="text-white font-bold">Segment Name</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'segmentName')}
                      />
                    </div>
                  )}
                  {visibleColumns.shotType && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.shotType }}
                    >
                      <span className="text-white font-bold">Shot Type</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'shotType')}
                      />
                    </div>
                  )}
                  {visibleColumns.pptQA && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.pptQA }}
                    >
                      <span className="text-white font-bold">PPT/Q&A</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'pptQA')}
                      />
                    </div>
                  )}
                  {visibleColumns.notes && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.notes }}
                    >
                      <span className="text-white font-bold">Notes</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'notes')}
                      />
                    </div>
                  )}
                  {visibleColumns.assets && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.assets }}
                    >
                      <span className="text-white font-bold">Assets</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'assets')}
                      />
                    </div>
                  )}
                  {visibleColumns.participants && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.participants }}
                    >
                      <span className="text-white font-bold">Participants</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'participants')}
                      />
                    </div>
                  )}
                  {visibleColumns.public && (
                    <div 
                      className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 relative"
                      style={{ width: columnWidths.public }}
                    >
                      <span className="text-white font-bold">Public</span>
                      <div 
                        className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                        onMouseDown={(e) => handleResizeStart(e, 'public')}
                      />
                    </div>
                  )}
                  {customColumns.map(column => 
                    visibleCustomColumns[column.id] !== false && (
                      <div 
                        key={column.id} 
                        className="px-4 py-2 border-r border-slate-600 flex items-center justify-center relative flex-shrink-0"
                        style={{ width: customColumnWidths[column.id] || 256 }}
                      >
                        <span className="text-white font-bold">{column.name}</span>
                        <button
                          onClick={() => removeCustomColumn(column.id)}
                          className="absolute top-2 right-1 w-5 h-5 bg-red-500 text-white rounded-full text-xs hover:bg-red-600"
                        >
                          ×
                        </button>
                        <div 
                          className="absolute right-0 top-0 bottom-0 w-1 cursor-col-resize hover:bg-blue-500 opacity-0 hover:opacity-100 transition-opacity"
                          onMouseDown={(e) => handleCustomColumnResizeStart(e, column.id)}
                        />
                      </div>
                    )
                  )}
                </div>

                {/* Schedule Rows */}
                {getFilteredSchedule().length === 0 ? (
                  <div className="h-24 flex items-center justify-center text-slate-500 text-xl">
                    No schedule items for Day {selectedDay}. Click "Add Schedule Item" to start!
                  </div>
                ) : (
                                     getFilteredSchedule().map((item, index) => (
                     <div 
                       key={`${item.id}-${item.notes?.length || 0}-${item.speakers?.length || 0}`}
                       data-item-id={item.id}
                       className={`border-b-2 border-slate-600 flex ${
                         activeTimers[item.id]
                           ? 'bg-green-950'
                           : activeItemId === item.id
                           ? 'bg-blue-950'
                           : stoppedItems.has(item.id)
                           ? 'bg-gray-900 opacity-40'
                           : index % 2 === 0 ? 'bg-slate-800' : 'bg-slate-900'
                       }`}
                       style={{ minHeight: getRowHeight(item.notes, item.speakers) }}
                     >
                       {visibleColumns.start && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.start }}
                         >
                           <span className="text-white font-mono text-base font-bold">
                             {item.isIndented ? '↘' : calculateStartTime(index)}
                           </span>
                         </div>
                       )}
                       {visibleColumns.programType && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.programType }}
                         >
                        <select 
                          value={item.programType}
                          onChange={(e) => {
                            setSchedule(prev => prev.map(scheduleItem => 
                              scheduleItem.id === item.id 
                                ? { ...scheduleItem, programType: e.target.value }
                                : scheduleItem
                            ));
                          }}
                          className="w-full px-3 py-2 bg-slate-700 border-2 border-slate-500 rounded text-white text-base"
                          style={{ 
                            backgroundColor: programTypeColors[item.programType] || '#374151',
                            color: item.programType === 'Sub Cue' ? '#000000' : '#ffffff'
                          }}
                        >
                          {programTypes.map(type => (
                            <option 
                              key={type} 
                              value={type}
                              style={{ 
                                backgroundColor: programTypeColors[type] || '#374151',
                                color: type === 'Sub Cue' ? '#000000' : '#ffffff'
                              }}
                            >
                              {type}
                            </option>
                          ))}
                        </select>
                       </div>
                       )}
                       {visibleColumns.duration && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.duration }}
                         >
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            min="0" 
                            max="23" 
                            value={item.durationHours}
                            onChange={(e) => {
                              const newValue = parseInt(e.target.value) || 0;
                              setSchedule(prev => prev.map(scheduleItem => 
                                scheduleItem.id === item.id 
                                  ? { ...scheduleItem, durationHours: newValue }
                                  : scheduleItem
                              ));
                            }}
                            className="w-14 px-2 py-2 bg-slate-700 border border-slate-600 rounded text-white text-center text-lg font-mono font-bold" 
                          />
                          <span className="text-slate-400 text-xl font-bold">:</span>
                          <input 
                            type="number" 
                            min="0" 
                            max="59" 
                            value={item.durationMinutes}
                            onChange={(e) => {
                              const newValue = parseInt(e.target.value) || 0;
                              setSchedule(prev => prev.map(scheduleItem => 
                                scheduleItem.id === item.id 
                                  ? { ...scheduleItem, durationMinutes: newValue }
                                  : scheduleItem
                              ));
                            }}
                            className="w-14 px-2 py-2 bg-slate-700 border border-slate-600 rounded text-white text-center text-lg font-mono font-bold" 
                          />
                          <span className="text-slate-400 text-xl font-bold">:</span>
                          <input 
                            type="number" 
                            min="0" 
                            max="59" 
                            value={item.durationSeconds}
                            onChange={(e) => {
                              const newValue = parseInt(e.target.value) || 0;
                              setSchedule(prev => prev.map(scheduleItem => 
                                scheduleItem.id === item.id 
                                  ? { ...scheduleItem, durationSeconds: newValue }
                                  : scheduleItem
                              ));
                            }}
                            className="w-14 px-2 py-2 bg-slate-700 border border-slate-600 rounded text-white text-center text-lg font-mono font-bold" 
                          />
                        </div>
                       </div>
                       )}
                       {visibleColumns.segmentName && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.segmentName }}
                         >
                        <input
                          type="text"
                          value={item.segmentName}
                          onChange={(e) => {
                            setSchedule(prev => prev.map(scheduleItem => 
                              scheduleItem.id === item.id 
                                ? { ...scheduleItem, segmentName: e.target.value }
                                : scheduleItem
                            ));
                          }}
                          className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-base"
                          placeholder="Enter segment name"
                        />
                       </div>
                       )}
                       {visibleColumns.shotType && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.shotType }}
                         >
                        <select 
                          value={item.shotType}
                          onChange={(e) => {
                            setSchedule(prev => prev.map(scheduleItem => 
                              scheduleItem.id === item.id 
                                ? { ...scheduleItem, shotType: e.target.value }
                                : scheduleItem
                            ));
                          }}
                          className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-base"
                        >
                          <option value="">Select Shot Type</option>
                          {shotTypes.map(type => (
                            <option key={type} value={type}>{type}</option>
                          ))}
                        </select>
                       </div>
                       )}
                       {visibleColumns.pptQA && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.pptQA }}
                         >
                        <div className="flex items-center gap-2">
                          <label className="flex items-center gap-1">
                            <input
                              type="checkbox"
                              checked={item.hasPPT}
                              onChange={(e) => {
                                setSchedule(prev => prev.map(scheduleItem => 
                                  scheduleItem.id === item.id 
                                    ? { ...scheduleItem, hasPPT: e.target.checked }
                                    : scheduleItem
                                ));
                              }}
                              className="rounded"
                            />
                            <span className="text-white text-base font-medium">PPT</span>
                          </label>
                          <label className="flex items-center gap-1">
                            <input
                              type="checkbox"
                              checked={item.hasQA}
                              onChange={(e) => {
                                setSchedule(prev => prev.map(scheduleItem => 
                                  scheduleItem.id === item.id 
                                    ? { ...scheduleItem, hasQA: e.target.checked }
                                    : scheduleItem
                                ));
                              }}
                              className="rounded"
                            />
                            <span className="text-white text-base font-medium">Q&A</span>
                          </label>
                        </div>
                       </div>
                       )}
                       {visibleColumns.notes && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0 transition-all duration-300 ease-in-out"
                           style={{ width: columnWidths.notes, minHeight: getRowHeight(item.notes, item.speakers) }}
                      >
                        <div
                          onClick={() => {
                            setEditingNotesItem(item.id);
                            setShowNotesModal(true);
                          }}
                          className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-base cursor-pointer hover:bg-slate-600 transition-colors flex items-center justify-center"
                          style={{ 
                            height: getCompactNotesHeight(item.notes),
                            wordWrap: 'break-word',
                            overflowWrap: 'break-word'
                          }}
                        >
                          {item.notes ? (
                            <div 
                              className="text-left w-full"
                              dangerouslySetInnerHTML={{ __html: item.notes }}
                            />
                          ) : (
                            <span className="text-slate-400">Click to edit notes...</span>
                          )}
                        </div>
                       </div>
                       )}
                       {visibleColumns.assets && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.assets }}
                         >
                        <div
                          onClick={() => {
                            setEditingAssetsItem(item.id);
                            setShowAssetsModal(true);
                          }}
                          className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-base cursor-pointer hover:bg-slate-600 transition-colors flex items-center justify-center"
                        >
                          {item.assets ? (
                            <div className="text-center">
                              <div className="text-sm font-medium">
                                {item.assets.split('||').length} Asset{item.assets.split('||').length !== 1 ? 's' : ''}
                              </div>
                            </div>
                          ) : (
                            <span className="text-slate-400">Click to add assets...</span>
                          )}
                        </div>
                       </div>
                       )}
                       {visibleColumns.participants && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.participants }}
                         >
                        <textarea
                          onClick={() => {
                            setEditingParticipantsItem(item.id);
                            setShowParticipantsModal(true);
                          }}
                          value={displaySpeakers(item.speakers || '')}
                          readOnly
                          className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-sm cursor-pointer hover:bg-slate-600 transition-colors resize-none leading-relaxed"
                          rows={Math.max(1, displaySpeakers(item.speakers || '').split('\n').length)}
                          placeholder="Click to add participants..."
                        />
                       </div>
                       )}
                       {visibleColumns.public && (
                         <div 
                           className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                           style={{ width: columnWidths.public }}
                         >
                        <input
                          type="checkbox"
                          checked={item.isPublic || false}
                          onChange={(e) => {
                            setSchedule(prev => prev.map(scheduleItem => 
                              scheduleItem.id === item.id 
                                ? { ...scheduleItem, isPublic: e.target.checked }
                                : scheduleItem
                            ));
                          }}
                          className="w-5 h-5 rounded border-2 border-slate-500 bg-slate-700 text-blue-600 focus:ring-blue-500 focus:ring-2"
                        />
                       </div>
                       )}
                       {customColumns.map(column => 
                         visibleCustomColumns[column.id] !== false && (
                           <div 
                             key={column.id} 
                             className="px-4 py-2 border-r border-slate-600 flex items-center justify-center flex-shrink-0"
                             style={{ width: customColumnWidths[column.id] || 256 }}
                           >
                          <textarea
                            value={item.customFields[column.name] || ''}
                            onChange={(e) => {
                              setSchedule(prev => prev.map(scheduleItem => 
                                scheduleItem.id === item.id 
                                  ? { 
                                      ...scheduleItem, 
                                      customFields: { 
                                        ...scheduleItem.customFields, 
                                        [column.name]: e.target.value 
                                      }
                                    }
                                  : scheduleItem
                              ));
                            }}
                            className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white text-base resize-none"
                            rows={Math.max(2, (item.customFields[column.name] || '').split('\n').length)}
                            placeholder={`${column.name}...`}
                          />
                        </div>
                       )
                       )}
                    </div>
                  ))
                )}
              </div>
            </div>

            {/* Right Fixed Section - Timer Controls */}
            <div className="w-32 flex-shrink-0 bg-slate-900" style={{ borderLeft: '6px solid #475569' }}>
              {/* Header */}
              <div className="h-24 bg-slate-700 border-b-3 border-slate-600 flex items-center justify-center">
                <span className="text-white font-bold text-base">Timer</span>
              </div>
              
              {/* Timer Controls for each row */}
              {getFilteredSchedule().length === 0 ? (
                <div className="h-24 flex items-center justify-center text-slate-500">
                  -
                </div>
              ) : (
                                 getFilteredSchedule().map((item, index) => (
                   <div 
                     key={`${item.id}-${item.notes?.length || 0}-${item.speakers?.length || 0}`}
                     className={`border-b-2 border-slate-600 flex flex-col items-center justify-center gap-1 ${
                       index % 2 === 0 ? 'bg-slate-800' : 'bg-slate-900'
                     }`}
                     style={{ minHeight: `calc(${getRowHeight(item.notes, item.speakers)} + 1.5px)` }}
                   >
                    <div className="flex flex-col items-center justify-center h-full gap-1">
                      <div className="text-sm font-mono text-slate-300">
                        {item.timerId || 'TIMER'}
                      </div>
                      <div className="flex flex-col gap-1">
                        {!item.isIndented ? (
                          <>
                            <button
                              onClick={() => loadCue(item.id)}
                              disabled={activeItemId === item.id}
                              className={`px-3 py-1 rounded text-sm font-bold transition-colors ${
                                activeItemId === item.id
                                  ? 'bg-blue-600 text-white cursor-default'
                                  : 'bg-slate-600 hover:bg-slate-500 text-white'
                              }`}
                            >
                              LOAD
                            </button>
                            <button
                              onClick={() => toggleTimer(item.id)}
                              disabled={activeItemId !== item.id || (activeTimers[item.id] ? false : Object.keys(activeTimers).length > 0)}
                              className={`px-3 py-1 rounded text-sm font-bold transition-colors ${
                                activeTimers[item.id]
                                  ? 'bg-red-600 hover:bg-red-500 text-white'
                                  : activeItemId === item.id && Object.keys(activeTimers).length === 0
                                  ? 'bg-green-600 hover:bg-green-500 text-white'
                                  : 'bg-slate-600 text-slate-400 cursor-not-allowed'
                              }`}
                            >
                              {activeTimers[item.id] ? 'STOP' : 'START'}
                            </button>
                          </>
                        ) : (
                          <>
                            <button
                              onClick={() => startSecondaryTimer(item.id)}
                              disabled={secondaryTimer?.itemId === item.id}
                              className={`px-3 py-1 rounded text-sm font-bold transition-colors ${
                                secondaryTimer?.itemId === item.id
                                  ? 'bg-orange-600 text-white cursor-default'
                                  : 'bg-orange-500 hover:bg-orange-400 text-white'
                              }`}
                            >
                              {secondaryTimer?.itemId === item.id ? 'PLAYING' : 'PLAY'}
                            </button>
                            <button
                              onClick={() => stopSecondaryTimer()}
                              disabled={secondaryTimer?.itemId !== item.id}
                              className={`px-3 py-1 rounded text-sm font-bold transition-colors ${
                                secondaryTimer?.itemId === item.id
                                  ? 'bg-red-600 hover:bg-red-500 text-white'
                                  : 'bg-slate-600 text-slate-400 cursor-not-allowed'
                              }`}
                            >
                              STOP
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Add Item Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-lg max-w-lg w-full max-h-[90vh] flex flex-col">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-4 border-b border-slate-600">
              <h2 className="text-lg font-bold text-white">Add Schedule Item</h2>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={modalForm.isPublic}
                  onChange={(e) => setModalForm(prev => ({ ...prev, isPublic: e.target.checked }))}
                  className="rounded"
                />
                <span className="text-slate-300 text-sm">Public</span>
              </label>
            </div>
            
            {/* Scrollable Content */}
            <div className="flex-1 overflow-y-auto p-4">
              <div className="space-y-3">
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-slate-300 text-sm font-medium mb-1">Cue</label>
                  <input
                    type="text"
                    value={modalForm.cue}
                    onChange={(e) => setModalForm(prev => ({ ...prev, cue: e.target.value }))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 text-sm"
                    placeholder="Enter cue number"
                  />
                </div>
                <div>
                  <label className="block text-slate-300 text-sm font-medium mb-1">Program Type</label>
                  <select
                    value={modalForm.programType}
                    onChange={(e) => setModalForm(prev => ({ ...prev, programType: e.target.value }))}
                    className="w-full px-3 py-2 bg-slate-700 border-2 border-slate-500 rounded text-white focus:outline-none focus:border-blue-500 text-sm"
                    style={{ 
                      backgroundColor: programTypeColors[modalForm.programType] || '#374151',
                      color: modalForm.programType === 'Sub Cue' ? '#000000' : '#ffffff'
                    }}
                  >
                    {programTypes.map(type => (
                      <option 
                        key={type} 
                        value={type}
                        style={{ 
                          backgroundColor: programTypeColors[type] || '#374151',
                          color: type === 'Sub Cue' ? '#000000' : '#ffffff'
                        }}
                      >
                        {type}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              
              
              <div>
                <label className="block text-slate-300 text-sm font-medium mb-1">Segment Name</label>
                <input
                  type="text"
                  value={modalForm.segmentName}
                  onChange={(e) => setModalForm(prev => ({ ...prev, segmentName: e.target.value }))}
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 text-sm"
                  placeholder="Enter segment name"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-slate-300 text-sm font-medium mb-1">Shot Type</label>
                  <select
                    value={modalForm.shotType}
                    onChange={(e) => setModalForm(prev => ({ ...prev, shotType: e.target.value }))}
                    className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:border-blue-500 text-sm"
                  >
                    <option value="">Select Shot Type</option>
                    {shotTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-slate-300 text-sm font-medium mb-1">Duration</label>
                  <div className="flex gap-1">
                    <input
                      type="number"
                      value={modalForm.durationHours}
                      onChange={(e) => setModalForm(prev => ({ ...prev, durationHours: parseInt(e.target.value) || 0 }))}
                      className="w-12 px-2 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:border-blue-500 text-sm text-center"
                      min="0"
                      placeholder="H"
                    />
                    <span className="text-slate-400 self-center text-sm">:</span>
                    <input
                      type="number"
                      value={modalForm.durationMinutes}
                      onChange={(e) => setModalForm(prev => ({ ...prev, durationMinutes: parseInt(e.target.value) || 0 }))}
                      className="w-12 px-2 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:border-blue-500 text-sm text-center"
                      min="0"
                      max="59"
                      placeholder="M"
                    />
                    <span className="text-slate-400 self-center text-sm">:</span>
                    <input
                      type="number"
                      value={modalForm.durationSeconds}
                      onChange={(e) => setModalForm(prev => ({ ...prev, durationSeconds: parseInt(e.target.value) || 0 }))}
                      className="w-12 px-2 py-2 bg-slate-700 border border-slate-600 rounded text-white focus:outline-none focus:border-blue-500 text-sm text-center"
                      min="0"
                      max="59"
                      placeholder="S"
                    />
                  </div>
                </div>
              </div>
              
              <div className="flex items-center gap-4">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={modalForm.hasPPT}
                    onChange={(e) => setModalForm(prev => ({ ...prev, hasPPT: e.target.checked }))}
                    className="rounded"
                  />
                  <span className="text-slate-300 text-sm">Has PPT</span>
                </label>
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={modalForm.hasQA}
                    onChange={(e) => setModalForm(prev => ({ ...prev, hasQA: e.target.checked }))}
                    className="rounded"
                  />
                  <span className="text-slate-300 text-sm">Has QA</span>
                </label>
              </div>
            </div>
            
            <div className="mt-3">
              <label className="block text-slate-300 text-sm font-medium mb-1">Notes</label>
              <div 
                className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 text-sm cursor-pointer hover:bg-slate-600 transition-colors min-h-[60px] flex items-center"
                onClick={() => {
                  setEditingNotesItem(-1); // Use -1 to indicate modal form editing
                  setShowNotesModal(true);
                }}
              >
                {modalForm.notes ? (
                  <div className="text-sm" dangerouslySetInnerHTML={{ __html: modalForm.notes }} />
                ) : (
                  <span className="text-slate-400">Click to edit notes with rich formatting...</span>
                )}
              </div>
            </div>
            
            <div className="mt-3">
              <label className="block text-slate-300 text-sm font-medium mb-1">Assets</label>
              <div 
                className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 text-sm cursor-pointer hover:bg-slate-600 transition-colors min-h-[60px] flex items-center"
                onClick={() => {
                  setEditingAssetsItem(-1); // Use -1 to indicate modal form editing
                  setShowAssetsModal(true);
                }}
              >
                {modalForm.assets ? (
                  <div className="text-sm" dangerouslySetInnerHTML={{ __html: modalForm.assets.replace(/\|\|/g, '<br>') }} />
                ) : (
                  <span className="text-slate-400">Click to edit assets with advanced management...</span>
                )}
              </div>
            </div>
            
            <div className="mt-3">
              <label className="block text-slate-300 text-sm font-medium mb-1">Participants</label>
              <div 
                className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 text-sm cursor-pointer hover:bg-slate-600 transition-colors min-h-[60px] flex items-center"
                onClick={() => {
                  setEditingParticipantsItem(-1); // Use -1 to indicate modal form editing
                  setShowParticipantsModal(true);
                }}
              >
                {modalForm.speakers ? (
                  <div className="text-sm">
                    {(() => {
                      try {
                        const speakers = JSON.parse(modalForm.speakers);
                        if (Array.isArray(speakers)) {
                          return speakers.map((speaker: any, index: number) => 
                            `${speaker.fullName || speaker.name || 'Unknown'}${index < speakers.length - 1 ? ', ' : ''}`
                          ).join('');
                        }
                        return modalForm.speakers;
                      } catch {
                        return modalForm.speakers;
                      }
                    })()}
                  </div>
                ) : (
                  <span className="text-slate-400">Click to edit participants with photos and advanced management...</span>
                )}
              </div>
              </div>
            </div>
            
            {/* Modal Footer */}
            <div className="p-4 border-t border-slate-600">
              <div className="flex gap-2">
                <button
                  onClick={() => addScheduleItem(modalForm)}
                  className="flex-1 px-3 py-2 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded transition-colors text-sm"
                >
                  Add Item
                </button>
                <button
                  onClick={() => setShowAddModal(false)}
                  className="flex-1 px-3 py-2 bg-slate-600 hover:bg-slate-500 text-white font-medium rounded transition-colors text-sm"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

             {/* Add Custom Column Modal */}
       {showCustomColumnModal && (
         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
           <div className="bg-slate-800 rounded-xl p-8 max-w-md w-full">
             <h2 className="text-2xl font-bold text-white mb-6">Add Custom Column</h2>
             
             <div className="mb-4">
               <label className="block text-slate-300 font-semibold mb-2">Column Name</label>
               <input
                 type="text"
                 placeholder="Enter column name"
                 className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:border-blue-500"
                 onKeyPress={(e) => {
                   if (e.key === 'Enter') {
                     const input = e.target as HTMLInputElement;
                     if (input.value.trim()) {
                       addCustomColumn(input.value.trim());
                       input.value = '';
                     }
                   }
                 }}
               />
             </div>
             
             <div className="flex gap-3">
               <button
                 onClick={() => {
                   const input = document.querySelector('input[placeholder="Enter column name"]') as HTMLInputElement;
                   if (input?.value.trim()) {
                     addCustomColumn(input.value.trim());
                     input.value = '';
                   }
                 }}
                 className="flex-1 px-4 py-3 bg-purple-600 hover:bg-purple-500 text-white font-semibold rounded-lg transition-colors"
               >
                 Add Column
               </button>
               <button
                 onClick={() => setShowCustomColumnModal(false)}
                 className="flex-1 px-4 py-3 bg-slate-600 hover:bg-slate-500 text-white font-semibold rounded-lg transition-colors"
               >
                 Cancel
               </button>
             </div>
           </div>
         </div>
       )}

       {/* Notes Editor Modal */}
       {showNotesModal && editingNotesItem !== null && (
         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
           <div className="bg-slate-800 rounded-xl p-6 max-w-5xl w-full max-h-[90vh] flex flex-col">
             <h2 className="text-2xl font-bold text-white mb-4">Edit Notes</h2>
             
             {/* Enhanced Formatting Toolbar */}
             <div className="mb-4 bg-slate-700 rounded-lg overflow-hidden">
               {/* Row 1: Basic Formatting */}
               <div className="flex items-center justify-between gap-4 p-3 border-b border-slate-600">
                 <div className="flex items-center gap-2">
                   <span className="text-white text-sm font-semibold">Format:</span>
                   <div className="flex gap-1">
                     <button
                       onClick={() => applyFormatting('undo')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-xs rounded flex items-center justify-center"
                       title="Undo"
                     >
                       ↶
                     </button>
                     <button
                       onClick={() => applyFormatting('redo')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-xs rounded flex items-center justify-center"
                       title="Redo"
                     >
                       ↷
                     </button>
                     <div className="w-px h-6 bg-slate-500 mx-1"></div>
                     <button
                       onClick={() => applyFormatting('bold')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-sm rounded font-bold flex items-center justify-center"
                       title="Bold"
                     >
                       B
                     </button>
                     <button
                       onClick={() => applyFormatting('italic')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-sm rounded italic flex items-center justify-center"
                       title="Italic"
                     >
                       I
                     </button>
                     <button
                       onClick={() => applyFormatting('underline')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-sm rounded underline flex items-center justify-center"
                       title="Underline"
                     >
                       U
                     </button>
                   </div>
                 </div>
                 
                 <div className="flex items-center gap-2">
                   <span className="text-white text-sm font-semibold">Size:</span>
                   <div className="flex gap-1">
                     <button
                       onClick={() => applyFormatting('fontSize', '1')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-xs rounded flex items-center justify-center"
                       title="Small"
                     >
                       S
                     </button>
                     <button
                       onClick={() => applyFormatting('fontSize', '3')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-sm rounded flex items-center justify-center"
                       title="Normal"
                     >
                       N
                     </button>
                     <button
                       onClick={() => applyFormatting('fontSize', '5')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-base rounded flex items-center justify-center"
                       title="Large"
                     >
                       L
                     </button>
                     <button
                       onClick={() => applyFormatting('fontSize', '7')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-lg rounded flex items-center justify-center"
                       title="X-Large"
                     >
                       XL
                     </button>
                   </div>
                 </div>
                 
                 <div className="flex items-center gap-2">
                   <span className="text-white text-sm font-semibold">Align:</span>
                   <div className="flex gap-1">
                     <button
                       onClick={() => applyFormatting('left')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-xs rounded flex items-center justify-center"
                       title="Left Align"
                     >
                       ≡
                     </button>
                     <button
                       onClick={() => applyFormatting('center')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-xs rounded flex items-center justify-center"
                       title="Center Align"
                     >
                       ≣
                     </button>
                     <button
                       onClick={() => applyFormatting('right')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-xs rounded flex items-center justify-center"
                       title="Right Align"
                     >
                       ≡
                     </button>
                   </div>
                 </div>
                 
                 <div className="flex items-center gap-2">
                   <span className="text-white text-sm font-semibold">Lists:</span>
                   <div className="flex gap-1">
                     <button
                       onClick={() => applyFormatting('bullet')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-sm rounded flex items-center justify-center"
                       title="Bullet List"
                     >
                       •
                     </button>
                     <button
                       onClick={() => applyFormatting('list')}
                       className="w-8 h-8 bg-slate-600 hover:bg-slate-500 text-white text-sm rounded flex items-center justify-center"
                       title="Numbered List"
                     >
                       1.
                     </button>
                   </div>
                 </div>
               </div>
               
               {/* Row 2: Colors and Highlighting */}
               <div className="flex items-center justify-center gap-6 p-3">
                 <div className="flex items-center gap-2">
                   <span className="text-white text-sm font-semibold">Text Color:</span>
                   <div className="flex gap-1">
                     <button
                       onClick={() => applyFormatting('color', '#ffffff')}
                       className="w-6 h-6 bg-white border border-slate-400 rounded"
                       title="White"
                     ></button>
                     <button
                       onClick={() => applyFormatting('color', '#ef4444')}
                       className="w-6 h-6 bg-red-500 rounded"
                       title="Red"
                     ></button>
                     <button
                       onClick={() => applyFormatting('color', '#3b82f6')}
                       className="w-6 h-6 bg-blue-500 rounded"
                       title="Blue"
                     ></button>
                     <button
                       onClick={() => applyFormatting('color', '#22c55e')}
                       className="w-6 h-6 bg-green-500 rounded"
                       title="Green"
                     ></button>
                     <button
                       onClick={() => applyFormatting('color', '#f97316')}
                       className="w-6 h-6 bg-orange-500 rounded"
                       title="Orange"
                     ></button>
                     <button
                       onClick={() => applyFormatting('color', '#a855f7')}
                       className="w-6 h-6 bg-purple-500 rounded"
                       title="Purple"
                     ></button>
                     <button
                       onClick={() => applyFormatting('color', '#000000')}
                       className="w-6 h-6 bg-black border border-slate-400 rounded"
                       title="Black"
                     ></button>
                   </div>
                 </div>
                 
                 <div className="flex items-center gap-2">
                   <span className="text-white text-sm font-semibold">Highlight:</span>
                   <div className="flex gap-1">
                     <button
                       onClick={() => applyFormatting('highlight', 'transparent')}
                       className="w-6 h-6 bg-slate-600 border border-slate-400 rounded flex items-center justify-center text-white text-xs"
                       title="No Highlight"
                     >
                       ×
                     </button>
                     <button
                       onClick={() => applyFormatting('highlight', '#fbbf24')}
                       className="w-6 h-6 bg-yellow-400 rounded"
                       title="Yellow"
                     ></button>
                     <button
                       onClick={() => applyFormatting('highlight', '#60a5fa')}
                       className="w-6 h-6 bg-blue-400 rounded"
                       title="Light Blue"
                     ></button>
                     <button
                       onClick={() => applyFormatting('highlight', '#4ade80')}
                       className="w-6 h-6 bg-green-400 rounded"
                       title="Light Green"
                     ></button>
                     <button
                       onClick={() => applyFormatting('highlight', '#f472b6')}
                       className="w-6 h-6 bg-pink-400 rounded"
                       title="Pink"
                     ></button>
                     <button
                       onClick={() => applyFormatting('highlight', '#fb923c')}
                       className="w-6 h-6 bg-orange-400 rounded"
                       title="Orange"
                     ></button>
                   </div>
                 </div>
               </div>
             </div>
             
             {/* Single Rich Text Editor */}
             <div className="flex-1 min-h-[400px] mb-6">
               <label className="block text-white text-sm mb-2">Notes:</label>
               <div
                 id="notes-editor"
                 contentEditable
                 className="w-full px-4 py-3 bg-slate-700 border border-slate-600 rounded-lg text-white text-base focus:outline-none focus:border-blue-500 overflow-auto"
                 style={{ 
                   height: '400px',
                   lineHeight: '1.5',
                   fontFamily: 'system-ui, -apple-system, sans-serif'
                 }}
                 data-placeholder="Start typing your notes here..."
                 onInput={(e) => {
                   // Optional: Add any real-time processing here
                 }}
               />
             </div>
             
             {/* Action Buttons */}
             <div className="flex gap-3">
               <button
                 onClick={saveNotes}
                 className="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg transition-colors"
               >
                 Save & Close
               </button>
               <button
                 onClick={() => {
                   setShowNotesModal(false);
                   setEditingNotesItem(null);
                 }}
                 className="flex-1 px-6 py-3 bg-slate-600 hover:bg-slate-500 text-white font-semibold rounded-lg transition-colors"
               >
                 Cancel
               </button>
             </div>
           </div>
         </div>
       )}

       {/* Assets Editor Modal */}
       {showAssetsModal && editingAssetsItem !== null && (
         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
           <div className="bg-slate-800 rounded-xl p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
             <h2 className="text-2xl font-bold text-white mb-6">Edit Assets</h2>
             
             <div className="space-y-4">
               <div className="flex justify-between items-center">
                 <h3 className="text-lg font-semibold text-white">Assets List</h3>
                 <button
                   onClick={addAssetRow}
                   className="px-4 py-2 bg-green-600 hover:bg-green-500 text-white rounded-lg transition-colors"
                 >
                   + Add Asset
                 </button>
               </div>
               
               <div id="assets-list" className="space-y-3">
                 {/* Assets will be dynamically added here */}
               </div>
             </div>
             
             <div className="flex gap-3 mt-6">
               <button
                 onClick={saveAssets}
                 className="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg transition-colors"
               >
                 Save & Close
               </button>
               <button
                 onClick={() => {
                   setShowAssetsModal(false);
                   setEditingAssetsItem(null);
                 }}
                 className="flex-1 px-6 py-3 bg-slate-600 hover:bg-slate-500 text-white font-semibold rounded-lg transition-colors"
               >
                 Cancel
               </button>
             </div>
           </div>
         </div>
       )}

       {/* Enhanced Participants Modal */}
       {showParticipantsModal && editingParticipantsItem !== null && (
         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
           <div className="bg-slate-800 rounded-xl max-w-5xl w-full max-h-[90vh] flex flex-col">
             {/* Header */}
             <div className="flex justify-between items-center p-6 border-b border-slate-700">
               <h2 className="text-xl font-bold text-white">
                 Edit Participants ({tempSpeakers.length}/7)
               </h2>
               <button
                 onClick={() => {
                   setShowParticipantsModal(false);
                   setEditingParticipantsItem(null);
                 }}
                 className="text-slate-400 hover:text-white text-xl"
               >
                 ✕
               </button>
             </div>
             
             {/* Content */}
             <div className="flex-1 p-6 overflow-y-auto">
               {/* Add Speaker Button */}
               <div className="mb-6">
                 <button
                   onClick={addSpeaker}
                   disabled={tempSpeakers.length >= 7}
                   className="px-4 py-2 bg-green-600 hover:bg-green-500 disabled:bg-slate-600 disabled:cursor-not-allowed text-white font-semibold rounded-lg transition-colors"
                 >
                   + Add Speaker {tempSpeakers.length < 7 && `(${7 - tempSpeakers.length} slots remaining)`}
                 </button>
               </div>
               
               {/* Speakers List */}
               <div className="space-y-4">
                 {tempSpeakers.sort((a, b) => a.slot - b.slot).map((speaker) => (
                   <div key={speaker.id} className="bg-slate-700 rounded-lg p-4 border border-slate-600">
                     <div className="flex items-center justify-between mb-4">
                       <h3 className="text-lg font-semibold text-white">
                         Speaker {speaker.slot}
                       </h3>
                       <button
                         onClick={() => removeSpeaker(speaker.id)}
                         className="w-8 h-8 bg-red-600 hover:bg-red-500 text-white rounded flex items-center justify-center transition-colors"
                         title="Remove Speaker"
                       >
                         ✕
                       </button>
                     </div>
                     
                     <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                       {/* Slot Number */}
                       <div>
                         <label className="block text-white text-sm font-medium mb-2">
                           Slot Number
                         </label>
                         <select
                           value={speaker.slot}
                           onChange={(e) => handleSlotChange(speaker.id, parseInt(e.target.value))}
                           className="w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white text-sm focus:outline-none focus:border-blue-500"
                         >
                           {[1, 2, 3, 4, 5, 6, 7].map(slot => {
                             const isUsed = tempSpeakers.some(s => s.id !== speaker.id && s.slot === slot);
                             return (
                               <option key={slot} value={slot} className={isUsed ? "bg-yellow-600 text-white" : "bg-slate-600 text-white"}>
                                 {slot} {isUsed ? "(Used)" : ""}
                               </option>
                             );
                           })}
                         </select>
                       </div>
                       
                       {/* Location */}
                       <div>
                         <label className="block text-white text-sm font-medium mb-2">
                           Location
                         </label>
                         <select
                           value={speaker.location}
                           onChange={(e) => updateSpeaker(speaker.id, 'location', e.target.value)}
                           className="w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white text-sm focus:outline-none focus:border-blue-500"
                         >
                           <option value="Podium">Podium</option>
                           <option value="Seat">Seat</option>
                           <option value="Virtual">Virtual</option>
                         </select>
                       </div>
                       
                       {/* Full Name */}
                       <div>
                         <label className="block text-white text-sm font-medium mb-2">
                           Full Name
                         </label>
                         <input
                           type="text"
                           value={speaker.fullName}
                           onChange={(e) => updateSpeaker(speaker.id, 'fullName', e.target.value)}
                           placeholder="Enter full name"
                           className="w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white text-sm placeholder-slate-400 focus:outline-none focus:border-blue-500"
                         />
                       </div>
                       
                       {/* Title */}
                       <div>
                         <label className="block text-white text-sm font-medium mb-2">
                           Title
                         </label>
                         <input
                           type="text"
                           value={speaker.title}
                           onChange={(e) => updateSpeaker(speaker.id, 'title', e.target.value)}
                           placeholder="Enter title/position"
                           className="w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white text-sm placeholder-slate-400 focus:outline-none focus:border-blue-500"
                         />
                       </div>
                       
                       {/* Organization */}
                       <div>
                         <label className="block text-white text-sm font-medium mb-2">
                           Organization
                         </label>
                         <input
                           type="text"
                           value={speaker.org}
                           onChange={(e) => updateSpeaker(speaker.id, 'org', e.target.value)}
                           placeholder="Enter organization"
                           className="w-full px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white text-sm placeholder-slate-400 focus:outline-none focus:border-blue-500"
                         />
                       </div>
                       
                       {/* Speaker Photo Link */}
                       <div>
                         <label className="block text-white text-sm font-medium mb-2">
                           Speaker Photo Link
                         </label>
                         <div className="flex items-center gap-3">
                           <input
                             type="url"
                             value={speaker.photoLink}
                             onChange={(e) => updateSpeaker(speaker.id, 'photoLink', e.target.value)}
                             placeholder="Enter photo URL"
                             className="flex-1 px-3 py-2 bg-slate-600 border border-slate-500 rounded text-white text-sm placeholder-slate-400 focus:outline-none focus:border-blue-500"
                           />
                           {speaker.photoLink && (
                             <div className="flex-shrink-0">
                               <img 
                                 src={speaker.photoLink} 
                                 alt={speaker.fullName}
                                 className="w-12 h-12 rounded object-cover border-2 border-slate-500 -mt-2.5"
                                 onError={(e) => {
                                   (e.target as HTMLImageElement).style.display = 'none';
                                 }}
                               />
                             </div>
                           )}
                         </div>
                       </div>
                     </div>
                   </div>
                 ))}
                 
                 {/* Empty State */}
                 {tempSpeakers.length === 0 && (
                   <div className="text-center py-8">
                     <div className="text-slate-400 text-lg mb-4">No speakers added yet</div>
                     <button
                       onClick={addSpeaker}
                       className="px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg transition-colors"
                     >
                       Add Your First Speaker
                     </button>
                   </div>
                 )}
               </div>
             </div>
             
             {/* Footer */}
             <div className="border-t border-slate-700 p-6">
               <div className="flex gap-3">
                 <button
                   onClick={saveSpeakers}
                   className="flex-1 px-6 py-3 bg-blue-600 hover:bg-blue-500 text-white font-semibold rounded-lg transition-colors"
                 >
                   Save & Close
                 </button>
                 <button
                   onClick={() => {
                     setShowParticipantsModal(false);
                     setEditingParticipantsItem(null);
                   }}
                   className="flex-1 px-6 py-3 bg-slate-600 hover:bg-slate-500 text-white font-semibold rounded-lg transition-colors"
                 >
                   Cancel
                 </button>
               </div>
             </div>
           </div>
         </div>
       )}

      {/* Messages Modal */}
      {showMessagesModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-lg p-6 max-w-md w-full">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-white">Send Message to Full Screen Timer</h3>
              <button
                onClick={() => setShowMessagesModal(false)}
                className="text-slate-400 hover:text-white transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              {/* Preset Messages */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Quick Presets
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {[
                    "Break in 5 minutes",
                    "Technical difficulties",
                    "Starting soon",
                    "Please wait",
                    "Break time",
                    "Resuming shortly",
                    "Stall / Stretch Time",
                    "Wrap Up Please"
                  ].map((preset) => (
                    <button
                      key={preset}
                      onClick={() => setMessageText(preset)}
                      className="px-3 py-2 bg-slate-700 hover:bg-slate-600 border border-slate-600 rounded text-white text-sm transition-colors text-left"
                    >
                      {preset}
                    </button>
                  ))}
                </div>
              </div>

              {/* Message Text Input */}
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  Custom Message
                </label>
                <textarea
                  value={messageText}
                  onChange={(e) => setMessageText(e.target.value)}
                  placeholder="Enter custom message to display on full screen timer..."
                  className="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded text-white placeholder-slate-400 focus:outline-none focus:border-blue-500 text-sm h-24 resize-none"
                />
              </div>

              {/* Message Preview */}
              {messageText && (
                <div className="p-3 bg-slate-700 rounded-lg">
                  <div className="text-slate-300 text-sm">
                    <strong>Message Preview:</strong> {messageText}
                  </div>
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="flex gap-3 mt-6">
              <button
                onClick={() => {
                  // Activate and send message to full screen timer
                  setMessageEnabled(true);
                  if (fullScreenTimerWindow && !fullScreenTimerWindow.closed) {
                    fullScreenTimerWindow.postMessage({
                      type: 'MESSAGE_UPDATE',
                      message: messageText,
                      enabled: true
                    }, '*');
                  }
                  setShowMessagesModal(false);
                }}
                className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded transition-colors"
                disabled={!messageText.trim()}
              >
                Send & Activate Message
              </button>
              <button
                onClick={() => setShowMessagesModal(false)}
                className="flex-1 px-4 py-2 bg-slate-600 hover:bg-slate-500 text-white font-medium rounded transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Filter View Modal */}
      {showFilterModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-slate-800 rounded-lg max-w-md w-full max-h-[80vh] flex flex-col">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-4 border-b border-slate-600">
              <h2 className="text-lg font-bold text-white">Filter Columns</h2>
              <button
                onClick={() => setShowFilterModal(false)}
                className="text-slate-400 hover:text-white text-xl"
              >
                ×
              </button>
            </div>
            
            {/* Scrollable Content */}
            <div className="flex-1 overflow-y-auto p-4">
              <div className="space-y-3">
                <p className="text-slate-300 text-sm mb-4">Select which columns to display in the schedule:</p>
                
                <div className="space-y-2">
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.start}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, start: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Start Time</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.programType}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, programType: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Program Type</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.duration}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, duration: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Duration</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.segmentName}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, segmentName: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Segment Name</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.shotType}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, shotType: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Shot Type</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.pptQA}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, pptQA: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">PPT/Q&A</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.notes}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, notes: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Notes</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.assets}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, assets: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Assets</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.participants}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, participants: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Participants</span>
                  </label>
                  
                  <label className="flex items-center gap-3">
                    <input
                      type="checkbox"
                      checked={visibleColumns.public}
                      onChange={(e) => setVisibleColumns(prev => ({ ...prev, public: e.target.checked }))}
                      className="rounded"
                    />
                    <span className="text-white">Public</span>
                  </label>
                  
                  {customColumns.map((column, index) => (
                    <label key={column.id} className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        checked={visibleCustomColumns[column.id] !== false}
                        onChange={(e) => setVisibleCustomColumns(prev => ({ ...prev, [column.id]: e.target.checked }))}
                        className="rounded"
                      />
                      <span className="text-white">
                        {column.name}
                        <span className="text-slate-400 text-xs ml-2">(Custom)</span>
                      </span>
                    </label>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Modal Footer */}
            <div className="p-4 border-t border-slate-600">
              <div className="flex gap-2">
                <button
                  onClick={() => {
                    setVisibleColumns({
                      start: true,
                      programType: true,
                      duration: true,
                      segmentName: true,
                      shotType: true,
                      pptQA: true,
                      notes: true,
                      assets: true,
                      participants: true,
                      public: true,
                      custom: true
                    });
                    // Show all custom columns
                    const allCustomVisible: Record<string, boolean> = {};
                    customColumns.forEach(column => {
                      allCustomVisible[column.id] = true;
                    });
                    setVisibleCustomColumns(allCustomVisible);
                  }}
                  className="px-3 py-2 bg-slate-600 hover:bg-slate-500 text-white font-medium rounded transition-colors text-sm"
                >
                  Show All
                </button>
                <button
                  onClick={() => {
                    setVisibleColumns({
                      start: false,
                      programType: false,
                      duration: false,
                      segmentName: false,
                      shotType: false,
                      pptQA: false,
                      notes: false,
                      assets: false,
                      participants: false,
                      public: false,
                      custom: false
                    });
                    // Hide all custom columns
                    const allCustomHidden: Record<string, boolean> = {};
                    customColumns.forEach(column => {
                      allCustomHidden[column.id] = false;
                    });
                    setVisibleCustomColumns(allCustomHidden);
                  }}
                  className="px-3 py-2 bg-slate-600 hover:bg-slate-500 text-white font-medium rounded transition-colors text-sm"
                >
                  Hide All
                </button>
                <button
                  onClick={() => setShowFilterModal(false)}
                  className="flex-1 px-3 py-2 bg-blue-600 hover:bg-blue-500 text-white font-medium rounded transition-colors text-sm"
                >
                  Apply Filters
                </button>
              </div>
            </div>
          </div>
        </div>
      )}


    </div>
  );
};

export default RunOfShowPage;